{"version":3,"sources":["ng://angular-gridster2/lib/gridsterScroll.service.ts","ng://angular-gridster2/lib/gridsterConfig.interface.ts","ng://angular-gridster2/lib/gridsterConfig.constant.ts","ng://angular-gridster2/lib/gridsterUtils.service.ts","ng://angular-gridster2/lib/gridster.interface.ts","ng://angular-gridster2/lib/gridsterEmptyCell.service.ts","ng://angular-gridster2/lib/gridsterCompact.service.ts","node_modules/tslib/tslib.es6.js","ng://angular-gridster2/lib/gridsterRenderer.service.ts","ng://angular-gridster2/lib/gridster.component.ts","ng://angular-gridster2/lib/gridsterItemComponent.interface.ts","ng://angular-gridster2/lib/gridsterSwap.service.ts","ng://angular-gridster2/lib/gridsterPush.service.ts","ng://angular-gridster2/lib/gridsterDraggable.service.ts","ng://angular-gridster2/lib/gridsterPushResize.service.ts","ng://angular-gridster2/lib/gridsterResizable.service.ts","ng://angular-gridster2/lib/gridsterItem.component.ts","ng://angular-gridster2/lib/gridsterPreview.component.ts","ng://angular-gridster2/lib/gridster.module.ts"],"names":["scrollSensitivity","scrollSpeed","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","Fit","ScrollVertical","ScrollHorizontal","Fixed","VerticalFixed","HorizontalFixed","Always","OnDragAndResize","None","CompactUp","CompactLeft","CompactUpAndLeft","CompactLeftAndUp","CompactRight","CompactUpAndRight","CompactRightAndUp","GridsterConfigService","gridType","GridType","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","compactType","CompactType","mobileBreakpoint","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","DisplayGrid","disableWindowResize","disableWarnings","scrollToNewItems","disableAutoPositionOnConflict","GridsterUtils","merge","obj1","obj2","properties","p","hasOwnProperty","debounce","func","wait","timeout","context","this","args","arguments","clearTimeout","setTimeout","apply","checkTouchEvent","clientX","touches","length","clientY","changedTouches","checkContentClassForEvent","gridster","$options","checkContentClass","target","currentTarget","checkContentClassForEmptyCellClickEvent","current","contentClass","hasAttribute","getAttribute","split","indexOf","parentNode","compareItems","a","b","y","x","Injectable","GridsterComponentInterface","GridsterEmptyCell","prototype","destroy","initialItem","movingItem","previewStyle","emptyCellExit","updateOptions","_this","emptyCellClick","options","renderer","listen","el","emptyCellClickCb","bind","emptyCellClickTouch","emptyCellContextMenu","emptyCellContextMenuCb","emptyCellDrop","emptyCellDragDrop","zone","runOutsideAngular","emptyCellMove","emptyCellDragOver","emptyCellDrag","emptyCellMouseDown","emptyCellDragTouch","item","getValidItemFromEvent","cdRef","markForCheck","preventDefault","stopPropagation","dataTransfer","dropEffect","buttons","emptyCellMMove","emptyCellMouseMove","emptyCellMMoveTouch","emptyCellUp","emptyCellMouseUp","emptyCellUpTouch","oldItem","rect","getBoundingClientRect","scrollLeft","left","scrollTop","top","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","checkCollision","GridsterCompact","checkCompact","checkCompactUp","checkCompactLeft","checkCompactRight","checkCompactItem","moveUpTillCollision","moveLeftTillCollision","moveRightTillCollision","widget","widgetMovedUp","l","grid","i","$item","compactEnabled","itemChanged","__assign","Object","assign","t","call","GridsterRenderer","updateItem","mobile","clearCellPosition","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","setCellPosition","marginBottom","marginRight","columns","updateGridster","addClass","removeClass1","removeClass2","removeClass3","removeClass","getGridColumnStyle","getLeftPosition","gridRows","getGridRowStyle","getTopPosition","gridColumns","d","transform","getLeftMargin","getTopMargin","GridsterComponent","nativeElement","JSON","parse","stringify","calculateLayoutDebounce","calculateLayout","curHeight","dragInProgress","emptyCell","compact","gridRenderer","checkCollisionTwoItems","item2","ngOnInit","ngOnChanges","changes","setOptions","api","optionsChanged","resize","onResize","getNextPossiblePosition","getFirstPossiblePosition","getLastPossiblePosition","clientWidth","clientHeight","offsetWidth","offsetHeight","checkIfToResize","windowResize","widgetsIndex","ngOnDestroy","scrollWidth","scrollHeight","setGridDimensions","notPlaced","max","marginWidth","marginHeight","updateGrid","setSize","drag","toggle","addItem","itemComponent","autoPositionItem","console","warn","push","removeItem","splice","collision","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","findItemsWithItem","newItem","startingFrom","colsIndex","rowsIndex","canAddToRows","canAddToColumns","tmpItem","farthestItem","reduce","prev","curr","currCoords","roundingMethod","noLimit","position","positionXToPixels","positionYToPixels","Component","selector","template","encapsulation","ViewEncapsulation","ElementRef","Renderer2","ChangeDetectorRef","NgZone","Input","GridsterItemComponentInterface","GridsterSwap","gridsterItem","swapedItem","swapItems","checkSwapBack","checkSwap","restoreSwapItem","setSwapItem","checkItemChanges","pushedBy","gridsterItemCollision","canBeDragged","gridsterItemCollide","copyCollisionX","copyCollisionY","copyX","copyY","intervalDuration","scroll","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","setInterval","cancelScroll","clearInterval","GridsterPush","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","direction","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","restoreItems","pushedItem","setPushedItems","checkPushBack","change","checkPushedItem","itemCollision","makePush","find","lastIndexOf","j","pop","removeFromPushedItem","addToTempPushed","addToPushed","tempPosition","removeFromPushed","lastPosition","path","GridsterDraggable","mousedown","touchstart","dragStart","which","dragFunction","dragMove","dragStopFunction","dragStop","mousemove","touchmove","mouseup","mouseleave","cancelOnBlur","touchend","touchcancel","diffLeft","diffTop","calculateItemPositionFromMousePosition","run","Promise","resolve","then","makeDrag","cancelDrag","positionX","positionY","positionXBackup","positionYBackup","enableDrag","dragStartFunction","dragStartDelay","cancelMouse","cancelMouseLeave","cancelTouchMove","cancelMove","eventMove","cancelTouchEnd","cancelTouchCancel","GridsterPushResize","row","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterResizable","itemBackup","bottom","right","diffRight","diffBottom","minHeight","minWidth","pushResize","directionFunction","handleN","handleW","handleS","handleE","handleNW","handleNE","handleSW","handleSE","makeResize","cancelResize","newPosition","setItemTop","setItemHeight","setItemLeft","setItemWidth","ceil","resizeEnabled","GridsterItemComponent","dragEnabled","updateItemSize","init","scrollIntoView","newValue","oldValue","decorators","type","Host","GridsterPreviewComponent","GridsterModule","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap"],"mappings":"+UAGIA,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KCKFC,IAAM,MACNC,eAAiB,iBACjBC,iBAAmB,mBACnBC,MAAQ,QACRC,cAAgB,gBAChBC,gBAAkB,sBAIlBC,OAAS,SACTC,gBAAkB,gBAClBC,KAAO,WAIPA,KAAO,OACPC,UAAY,YACZC,YAAc,cACdC,iBAAmB,iBACnBC,iBAAmB,iBACnBC,aAAe,eACfC,kBAAoB,kBACpBC,kBAAoB,mBCrCTC,EAAwC,CACnDC,SAAUC,EAASlB,IAMnBmB,cAAe,IACfC,eAAgB,IAChBC,yBAAyB,EACzBC,wBAAwB,EACxBC,aAAa,EACbC,YAAaC,EAAYjB,KACzBkB,iBAAkB,IAClBC,QAAS,EACTC,QAAS,IACTC,QAAS,EACTC,QAAS,IACTC,gBAAiB,EACjBC,gBAAiB,EACjBC,YAAa,GACbC,YAAa,GACbC,YAAa,EACbC,YAAa,EACbC,YAAa,EACbC,YAAa,KACbC,OAAQ,GACRC,aAAa,EACbC,eAAgB,KAChBC,iBAAkB,KAClBC,kBAAmB,KACnBC,gBAAiB,KACjBC,yBAAyB,EACzBtD,kBAAmB,GACnBC,YAAa,GACbsD,aAAcC,UACdC,gBAAiBD,UACjBE,wBAAyBF,UACzBG,mBAAoBH,UAEpBI,mBAAoBJ,UAEpBK,iBAAkBL,UAElBM,oBAAqBN,UAErBO,qBAAsBP,UAEtBQ,sBAAsB,EACtBC,4BAA4B,EAC5BC,qBAAqB,EACrBC,qBAAqB,EACrBC,uBAAwBZ,UACxBa,6BAA8Bb,UAC9Bc,sBAAuBd,UACvBe,sBAAuBf,UACvBgB,qBAAsB,GACtBC,qBAAsB,GAEtBC,mBAAmB,EACnBC,UAAW,CACTC,WAAY,EACZC,SAAS,EACTC,mBAAoB,wBACpBC,eAAe,EACfC,gBAAiB,eACjBC,KAAMzB,UACN0B,MAAO1B,UAEP2B,eAAe,EACfC,sBAAuB5B,WAGzB6B,UAAW,CACTT,WAAY,EACZC,SAAS,EACTS,QAAS,CACPC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,IAAI,EACJC,IAAI,EACJC,IAAI,EACJC,IAAI,GAENb,KAAMzB,UACN0B,MAAO1B,WAGTuC,MAAM,EACNC,WAAW,EACXC,mBAAmB,EACnBC,qBAAqB,EACrBC,eAAgB,CAACC,OAAO,EAAMC,MAAM,EAAMC,OAAO,EAAMC,MAAM,GAC7DC,iBAAiB,EACjBC,YAAaC,EAAY1F,gBACzB2F,qBAAqB,EACrBC,iBAAiB,EACjBC,kBAAkB,EAClBC,+BAA+B,GClGjCC,EAAA,WAAA,SAAAA,KAkFA,OA/ESA,EAAAC,MAAP,SAAaC,EAAWC,EAAWC,GACjC,IAAK,IAAMC,KAAKF,OACE,IAAZA,EAAKE,IAAiBD,EAAWE,eAAeD,KAC3B,iBAAZF,EAAKE,GACdH,EAAKG,GAAKL,EAAcC,MAAMC,EAAKG,GAAIF,EAAKE,GAAID,EAAWC,IAE3DH,EAAKG,GAAKF,EAAKE,IAKrB,OAAOH,GAGFF,EAAAO,SAAP,SAAgBC,EAAgBC,OAC1BC,EACJ,OAAO,eACCC,EAAUC,KAAMC,EAAOC,UAK7BC,aAAaL,GACbA,EAAUM,WALI,WACZN,EAAU,KACVF,EAAKS,MAAMN,EAASE,IAGMJ,KAIzBT,EAAAkB,gBAAP,SAAuBzC,GACjBA,EAAE0C,UAAY1E,WAAagC,EAAE2C,UAC3B3C,EAAE2C,SAAW3C,EAAE2C,QAAQC,QACzB5C,EAAE0C,QAAU1C,EAAE2C,QAAQ,GAAGD,QACzB1C,EAAE6C,QAAU7C,EAAE2C,QAAQ,GAAGE,SAChB7C,EAAE8C,gBAAkB9C,EAAE8C,eAAeF,SAC9C5C,EAAE0C,QAAU1C,EAAE8C,eAAe,GAAGJ,QAChC1C,EAAE6C,QAAU7C,EAAE8C,eAAe,GAAGD,WAK/BtB,EAAAwB,0BAAP,SAAiCC,EAAsChD,GACrE,GAAIgD,EAASC,SAAS9D,UAAUI,eAC9B,IAAKgC,EAAc2B,kBAAkBlD,EAAEmD,OAAQnD,EAAEoD,cAAeJ,EAASC,SAAS9D,UAAUK,iBAC1F,OAAO,OAGT,GAAI+B,EAAc2B,kBAAkBlD,EAAEmD,OAAQnD,EAAEoD,cAAeJ,EAASC,SAAS9D,UAAUG,oBACzF,OAAO,EAGX,OAAO,GAGFiC,EAAA8B,wCAAP,SAA+CL,EAAsChD,GACnF,OAAOuB,EAAc2B,kBAAkBlD,EAAEmD,OAAQnD,EAAEoD,cAAeJ,EAASC,SAAS9D,UAAUG,qBACzFiC,EAAc2B,kBAAkBlD,EAAEmD,OAAQnD,EAAEoD,cAAeJ,EAASC,SAAS9D,UAAUK,kBAGvF+B,EAAA2B,kBAAP,SAAyBC,EAAaG,EAAcC,GAClD,SAAKJ,GAAUA,IAAWG,QAGtBH,EAAOK,aAAa,WAA6E,EAAjEL,EAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQJ,KAG3EhC,EAAc2B,kBAAkBC,EAAOS,WAAYN,EAASC,KAIhEhC,EAAAsC,aAAP,SAAoBC,EAA6BC,GAC/C,OAAID,EAAEE,EAAID,EAAEC,GACF,EACCF,EAAEE,EAAID,EAAEC,EACV,EACEF,EAAEG,EAAIF,EAAEE,GACT,EAED,uBA/EZC,EAAAA,aAkFD3C,EAlFA,KCKA,SAAA4C,MCHAC,EAAA,WAgBE,SAAAA,EAAoBpB,GAAAb,KAAAa,SAAAA,EA4MtB,OAzMEoB,EAAAC,UAAAC,QAAA,kBACSnC,KAAKoC,mBACLpC,KAAKa,SAASwB,WACjBrC,KAAKa,SAASyB,cAChBtC,KAAKa,SAASyB,sBAETtC,KAAKa,SACRb,KAAKuC,gBACPvC,KAAKuC,gBACLvC,KAAKuC,cAAgB,OAIzBN,EAAAC,UAAAM,cAAA,WAAA,IAAAC,EAAAzC,KACMA,KAAKa,SAASC,SAASzE,uBAAyB2D,KAAK0C,gBAAkB1C,KAAKa,SAAS8B,QAAQlG,wBAC/FuD,KAAK0C,eAAiB1C,KAAKa,SAAS+B,SAASC,OAAO7C,KAAKa,SAASiC,GAAI,QAAS9C,KAAK+C,iBAAiBC,KAAKhD,OAC1GA,KAAKiD,oBAAsBjD,KAAKa,SAAS+B,SAASC,OAAO7C,KAAKa,SAASiC,GAAI,WAAY9C,KAAK+C,iBAAiBC,KAAKhD,SACxGA,KAAKa,SAASC,SAASzE,sBAAwB2D,KAAK0C,gBAAkB1C,KAAKiD,sBACrFjD,KAAK0C,iBACL1C,KAAKiD,sBACLjD,KAAK0C,eAAiB,KACtB1C,KAAKiD,oBAAsB,MAEzBjD,KAAKa,SAASC,SAASxE,6BAA+B0D,KAAKkD,sBAC7DlD,KAAKa,SAAS8B,QAAQjG,6BACtBsD,KAAKkD,qBAAuBlD,KAAKa,SAAS+B,SAASC,OAAO7C,KAAKa,SAASiC,GAAI,cAAe9C,KAAKmD,uBAAuBH,KAAKhD,QAClHA,KAAKa,SAASC,SAASxE,4BAA8B0D,KAAKkD,uBACpElD,KAAKkD,uBACLlD,KAAKkD,qBAAuB,MAE1BlD,KAAKa,SAASC,SAASvE,sBAAwByD,KAAKoD,eAAiBpD,KAAKa,SAAS8B,QAAQhG,uBAC7FqD,KAAKoD,cAAgBpD,KAAKa,SAAS+B,SAASC,OAAO7C,KAAKa,SAASiC,GAAI,OAAQ9C,KAAKqD,kBAAkBL,KAAKhD,OACzGA,KAAKa,SAASyC,KAAKC,kBAAkB,WACnCd,EAAKe,cAAgBf,EAAK5B,SAAS+B,SAASC,OAAOJ,EAAK5B,SAASiC,GAAI,WAAYL,EAAKgB,kBAAkBT,KAAKP,MAE/GzC,KAAKuC,cAAgBvC,KAAKa,SAAS+B,SAASC,OAAO,WAAY,UAAW,WACxEJ,EAAK5B,SAASwB,WAAa,KAC3BI,EAAK5B,SAASyB,mBAENtC,KAAKa,SAASC,SAASvE,qBAAuByD,KAAKoD,eAAiBpD,KAAKwD,eAAiBxD,KAAKuC,gBACzGvC,KAAKoD,gBACLpD,KAAKwD,gBACLxD,KAAKuC,gBACLvC,KAAKwD,cAAgB,KACrBxD,KAAKoD,cAAgB,KACrBpD,KAAKuC,cAAgB,MAEnBvC,KAAKa,SAASC,SAAStE,sBAAwBwD,KAAK0D,eAAiB1D,KAAKa,SAAS8B,QAAQ/F,uBAC7FoD,KAAK0D,cAAgB1D,KAAKa,SAAS+B,SAASC,OAAO7C,KAAKa,SAASiC,GAAI,YAAa9C,KAAK2D,mBAAmBX,KAAKhD,OAC/GA,KAAK4D,mBAAqB5D,KAAKa,SAAS+B,SAASC,OAAO7C,KAAKa,SAASiC,GAAI,aAAc9C,KAAK2D,mBAAmBX,KAAKhD,SAC3GA,KAAKa,SAASC,SAAStE,qBAAuBwD,KAAK0D,eAAiB1D,KAAK4D,qBACnF5D,KAAK0D,gBACL1D,KAAK4D,qBACL5D,KAAK0D,cAAgB,KACrB1D,KAAK4D,mBAAqB,OAI9B3B,EAAAC,UAAAa,iBAAA,SAAiBlF,GACf,IAAImC,KAAKa,SAASwB,aAAcjD,EAAc8B,wCAAwClB,KAAKa,SAAUhD,GAArG,KAGMgG,EAAO7D,KAAK8D,sBAAsBjG,GACnCgG,IAGD7D,KAAKa,SAAS8B,QAAQlG,wBACxBuD,KAAKa,SAAS8B,QAAQlG,uBAAuBoB,EAAGgG,GAElD7D,KAAKa,SAASkD,MAAMC,kBAGtB/B,EAAAC,UAAAiB,uBAAA,SAAuBtF,GACrB,IAAImC,KAAKa,SAASwB,aAAcjD,EAAc8B,wCAAwClB,KAAKa,SAAUhD,GAArG,CAGAA,EAAEoG,iBACFpG,EAAEqG,sBACIL,EAAO7D,KAAK8D,sBAAsBjG,GACnCgG,IAGD7D,KAAKa,SAAS8B,QAAQjG,8BACxBsD,KAAKa,SAAS8B,QAAQjG,6BAA6BmB,EAAGgG,GAExD7D,KAAKa,SAASkD,MAAMC,kBAGtB/B,EAAAC,UAAAmB,kBAAA,SAAkBxF,OACVgG,EAAO7D,KAAK8D,sBAAsBjG,GACnCgG,IAGD7D,KAAKa,SAAS8B,QAAQhG,uBACxBqD,KAAKa,SAAS8B,QAAQhG,sBAAsBkB,EAAGgG,GAEjD7D,KAAKa,SAASkD,MAAMC,iBAGtB/B,EAAAC,UAAAuB,kBAAA,SAAkB5F,GAChBA,EAAEoG,iBACFpG,EAAEqG,sBACIL,EAAO7D,KAAK8D,sBAAsBjG,GAGtCmC,KAAKa,SAASwB,WAFZwB,GACFhG,EAAEsG,aAAaC,WAAa,OACDP,IAE3BhG,EAAEsG,aAAaC,WAAa,OACD,MAE7BpE,KAAKa,SAASyB,gBAGhBL,EAAAC,UAAAyB,mBAAA,SAAmB9F,GAAnB,IAAA4E,EAAAzC,KACE,IAAIZ,EAAc8B,wCAAwClB,KAAKa,SAAUhD,GAAzE,CAGAA,EAAEoG,iBACFpG,EAAEqG,sBACIL,EAAO7D,KAAK8D,sBAAsBjG,GAEnCgG,GADuB,IACfhG,EAAEwG,UAGfrE,KAAKoC,YAAcyB,EACnB7D,KAAKa,SAASwB,WAAawB,EAC3B7D,KAAKa,SAASyB,eACdtC,KAAKa,SAASyC,KAAKC,kBAAkB,WACnCd,EAAK6B,eAAiB7B,EAAK5B,SAAS+B,SAASC,OAAO,SAAU,YAAaJ,EAAK8B,mBAAmBvB,KAAKP,IACxGA,EAAK+B,oBAAsB/B,EAAK5B,SAAS+B,SAASC,OAAO,SAAU,YAAaJ,EAAK8B,mBAAmBvB,KAAKP,MAE/GzC,KAAKyE,YAAczE,KAAKa,SAAS+B,SAASC,OAAO,SAAU,UAAW7C,KAAK0E,iBAAiB1B,KAAKhD,OACjGA,KAAK2E,iBAAmB3E,KAAKa,SAAS+B,SAASC,OAAO,SAAU,WAAY7C,KAAK0E,iBAAiB1B,KAAKhD,UAGzGiC,EAAAC,UAAAqC,mBAAA,SAAmB1G,GACjBA,EAAEoG,iBACFpG,EAAEqG,sBACIL,EAAO7D,KAAK8D,sBAAsBjG,EAAGmC,KAAKoC,aAC3CyB,IAIL7D,KAAKa,SAASwB,WAAawB,EAC3B7D,KAAKa,SAASyB,iBAGhBL,EAAAC,UAAAwC,iBAAA,SAAiB7G,GAAjB,IAAA4E,EAAAzC,KACEA,KAAKsE,iBACLtE,KAAKwE,sBACLxE,KAAKyE,cACLzE,KAAK2E,uBACCd,EAAO7D,KAAK8D,sBAAsBjG,EAAGmC,KAAKoC,aAC5CyB,IACF7D,KAAKa,SAASwB,WAAawB,GAEzB7D,KAAKa,SAAS8B,QAAQ/F,uBAAyBoD,KAAKa,SAASwB,YAC/DrC,KAAKa,SAAS8B,QAAQ/F,sBAAsBiB,EAAGmC,KAAKa,SAASwB,YAE/DjC,WAAW,WACTqC,EAAKL,YAAc,KACfK,EAAK5B,WACP4B,EAAK5B,SAASwB,WAAa,KAC3BI,EAAK5B,SAASyB,kBAGlBtC,KAAKa,SAASkD,MAAMC,gBAGtB/B,EAAAC,UAAA4B,sBAAA,SAAsBjG,EAAQ+G,GAC5B/G,EAAEoG,iBACFpG,EAAEqG,kBACF9E,EAAckB,gBAAgBzC,OACxBgH,EAAO7E,KAAKa,SAASiC,GAAGgC,wBACxBhD,EAAIjE,EAAE0C,QAAUP,KAAKa,SAASiC,GAAGiC,WAAaF,EAAKG,KAAOhF,KAAKa,SAASC,SAASzF,OACjFwG,EAAIhE,EAAE6C,QAAUV,KAAKa,SAASiC,GAAGmC,UAAYJ,EAAKK,IAAMlF,KAAKa,SAASC,SAASzF,OAC/EwI,EAAqB,CACzB/B,EAAG9B,KAAKa,SAASsE,kBAAkBrD,EAAGsD,KAAKC,OAAO,GAClDxD,EAAG7B,KAAKa,SAASyE,kBAAkBzD,EAAGuD,KAAKC,OAAO,GAClDE,KAAMvF,KAAKa,SAASC,SAASjG,gBAC7B2K,KAAMxF,KAAKa,SAASC,SAAShG,iBAgB/B,GAdI8J,IACFf,EAAK0B,KAAOH,KAAKK,IAAIL,KAAKM,IAAId,EAAQ9C,EAAI+B,EAAK/B,GAAK,EAAG9B,KAAKa,SAASC,SAASjE,sBAC9EgH,EAAK2B,KAAOJ,KAAKK,IAAIL,KAAKM,IAAId,EAAQ/C,EAAIgC,EAAKhC,GAAK,EAAG7B,KAAKa,SAASC,SAAShE,sBAC1E8H,EAAQ9C,EAAI+B,EAAK/B,EACnB+B,EAAK/B,EAAI8C,EAAQ9C,EACR8C,EAAQ9C,EAAI+B,EAAK/B,EAAI9B,KAAKa,SAASC,SAASjE,qBAAuB,IAC5EgH,EAAK/B,EAAI9B,KAAKa,SAASwB,WAAarC,KAAKa,SAASwB,WAAWP,EAAI,GAE/D8C,EAAQ/C,EAAIgC,EAAKhC,EACnBgC,EAAKhC,EAAI+C,EAAQ/C,EACR+C,EAAQ/C,EAAIgC,EAAKhC,EAAI7B,KAAKa,SAASC,SAAShE,qBAAuB,IAC5E+G,EAAKhC,EAAI7B,KAAKa,SAASwB,WAAarC,KAAKa,SAASwB,WAAWR,EAAI,KAGjE7B,KAAKa,SAAS8E,eAAe9B,GAGjC,OAAOA,uBA1NV9B,EAAAA,sDAFOC,KA8NRC,EA5NA,GCCA2D,EAAA,WAGE,SAAAA,EAAoB/E,GAAAb,KAAAa,SAAAA,EA8ItB,OA3IE+E,EAAA1D,UAAAC,QAAA,kBACSnC,KAAKa,UAGd+E,EAAA1D,UAAA2D,aAAA,WACM7F,KAAKa,SAASC,SAASxG,cAAgBC,EAAYjB,OACjD0G,KAAKa,SAASC,SAASxG,cAAgBC,EAAYhB,UACrDyG,KAAK8F,iBACI9F,KAAKa,SAASC,SAASxG,cAAgBC,EAAYf,YAC5DwG,KAAK+F,mBACI/F,KAAKa,SAASC,SAASxG,cAAgBC,EAAYd,kBAC5DuG,KAAK8F,iBACL9F,KAAK+F,oBACI/F,KAAKa,SAASC,SAASxG,cAAgBC,EAAYb,kBAC5DsG,KAAK+F,mBACL/F,KAAK8F,kBACI9F,KAAKa,SAASC,SAASxG,cAAgBC,EAAYZ,aAC5DqG,KAAKgG,oBACIhG,KAAKa,SAASC,SAASxG,cAAgBC,EAAYX,mBAC5DoG,KAAK8F,iBACL9F,KAAKgG,qBACIhG,KAAKa,SAASC,SAASxG,cAAgBC,EAAYV,oBAC5DmG,KAAKgG,oBACLhG,KAAK8F,oBAKXF,EAAA1D,UAAA+D,iBAAA,SAAiBpC,GACX7D,KAAKa,SAASC,SAASxG,cAAgBC,EAAYjB,OACjD0G,KAAKa,SAASC,SAASxG,cAAgBC,EAAYhB,UACrDyG,KAAKkG,oBAAoBrC,GAChB7D,KAAKa,SAASC,SAASxG,cAAgBC,EAAYf,YAC5DwG,KAAKmG,sBAAsBtC,GAClB7D,KAAKa,SAASC,SAASxG,cAAgBC,EAAYd,kBAC5DuG,KAAKkG,oBAAoBrC,GACzB7D,KAAKmG,sBAAsBtC,IAClB7D,KAAKa,SAASC,SAASxG,cAAgBC,EAAYb,kBAC5DsG,KAAKmG,sBAAsBtC,GAC3B7D,KAAKkG,oBAAoBrC,IAChB7D,KAAKa,SAASC,SAASxG,cAAgBC,EAAYX,oBAC5DoG,KAAKkG,oBAAoBrC,GACzB7D,KAAKoG,uBAAuBvC,MAKlC+B,EAAA1D,UAAA4D,eAAA,WAGE,QAF2BO,EAAvBC,GAAgB,EACdC,EAAIvG,KAAKa,SAAS2F,KAAK/F,OACpBgG,EAAI,EAAGA,EAAIF,EAAGE,KAEe,KADpCJ,EAASrG,KAAKa,SAAS2F,KAAKC,IACjBC,MAAMC,gBAGT3G,KAAKkG,oBAAoBG,EAAOK,SAEtCJ,GAAgB,EAChBD,EAAOxC,KAAKhC,EAAIwE,EAAOK,MAAM7E,EAC7BwE,EAAOO,eAGPN,GACFtG,KAAK6F,gBAITD,EAAA1D,UAAAgE,oBAAA,SAAoBrC,GAElB,OADAA,EAAKhC,GAAK,EACN7B,KAAKa,SAAS8E,eAAe9B,IAC/BA,EAAKhC,GAAK,GACH,IAEP7B,KAAKkG,oBAAoBrC,IAClB,IAIX+B,EAAA1D,UAAA6D,iBAAA,WAGE,QAF2BM,EAAvBC,GAAgB,EACdC,EAAIvG,KAAKa,SAAS2F,KAAK/F,OACpBgG,EAAI,EAAGA,EAAIF,EAAGE,KAEe,KADpCJ,EAASrG,KAAKa,SAAS2F,KAAKC,IACjBC,MAAMC,gBAGT3G,KAAKmG,sBAAsBE,EAAOK,SAExCJ,GAAgB,EAChBD,EAAOxC,KAAK/B,EAAIuE,EAAOK,MAAM5E,EAC7BuE,EAAOO,eAGPN,GACFtG,KAAK6F,gBAITD,EAAA1D,UAAA8D,kBAAA,WAGE,QAF2BK,EAAvBC,GAAgB,EACdC,EAAIvG,KAAKa,SAAS2F,KAAK/F,OACpBgG,EAAI,EAAGA,EAAIF,EAAGE,KAEe,KADpCJ,EAASrG,KAAKa,SAAS2F,KAAKC,IACjBC,MAAMC,gBAGT3G,KAAKoG,uBAAuBC,EAAOK,SAEzCJ,GAAgB,EAChBD,EAAOxC,KAAK/B,EAAIuE,EAAOK,MAAM5E,EAC7BuE,EAAOO,eAGPN,GACFtG,KAAK6F,gBAITD,EAAA1D,UAAAiE,sBAAA,SAAsBtC,GAEpB,OADAA,EAAK/B,GAAK,EACN9B,KAAKa,SAAS8E,eAAe9B,IAC/BA,EAAK/B,GAAK,GACH,IAEP9B,KAAKmG,sBAAsBtC,IACpB,IAIX+B,EAAA1D,UAAAkE,uBAAA,SAAuBvC,GAErB,OADAA,EAAK/B,GAAK,EACN9B,KAAKa,SAAS8E,eAAe9B,IAC/BA,EAAK/B,GAAK,GACH,IAEP9B,KAAKoG,uBAAuBvC,IACrB,wBA9IZ9B,EAAAA,sDALOC,KAsJR4D,EAjJA,GCsBWiB,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIpJ,EAAG6I,EAAI,EAAG3I,EAAIoC,UAAUO,OAAQgG,EAAI3I,EAAG2I,IAE5C,IAAK,IAAIhH,KADT7B,EAAIsC,UAAUuG,GACOK,OAAO5E,UAAUxC,eAAeuH,KAAKrJ,EAAG6B,KAAIuH,EAAEvH,GAAK7B,EAAE6B,IAE9E,OAAOuH,IAEK3G,MAAML,KAAME,YC/BhCgH,EAAA,WAGE,SAAAA,EAAoBrG,GAAAb,KAAAa,SAAAA,EAmMtB,OAhMEqG,EAAAhF,UAAAC,QAAA,kBACSnC,KAAKa,UAGdqG,EAAAhF,UAAAiF,WAAA,SAAWrE,EAASe,EAAoBjB,GACtC,GAAI5C,KAAKa,SAASuG,OAChBpH,KAAKqH,kBAAkBzE,EAAUE,GAC7B9C,KAAKa,SAASC,SAAS3G,wBACzByI,EAAS0E,SAASxE,EAAI,SAAWe,EAAK2B,KAAOxF,KAAKa,SAASC,SAAS5G,eAAkB,MAEtF0I,EAAS0E,SAASxE,EAAI,SAAW9C,KAAKa,SAAS0G,SAAW,EAAI1D,EAAK2B,KAAQ,MAEzExF,KAAKa,SAASC,SAAS1G,uBACzBwI,EAAS0E,SAASxE,EAAI,QAAS9C,KAAKa,SAASC,SAAS7G,cAAgB,MAEtE2I,EAAS0E,SAASxE,EAAI,QAAS,IAGjCF,EAAS0E,SAASxE,EAAI,gBAAiB9C,KAAKa,SAASC,SAASzF,OAAS,MACvEuH,EAAS0E,SAASxE,EAAI,eAAgB,QACjC,KACChB,EAAIsD,KAAKoC,MAAMxH,KAAKa,SAAS4G,YAAc5D,EAAK/B,GAChDD,EAAIuD,KAAKoC,MAAMxH,KAAKa,SAAS6G,aAAe7D,EAAKhC,GACjD8F,EAAQ3H,KAAKa,SAAS4G,YAAc5D,EAAK0B,KAAOvF,KAAKa,SAASC,SAASzF,OACvEuM,EAAU5H,KAAKa,SAAS6G,aAAe7D,EAAK2B,KAAOxF,KAAKa,SAASC,SAASzF,OAEhF2E,KAAK6H,gBAAgBjF,EAAUE,EAAIhB,EAAGD,GACtCe,EAAS0E,SAASxE,EAAI,QAAS6E,EAAQ,MACvC/E,EAAS0E,SAASxE,EAAI,SAAU8E,EAAS,UACrCE,EAA8B,KAC9BC,EAA6B,KAC7B/H,KAAKa,SAASC,SAASxF,cACrB0E,KAAKa,SAAS2E,OAAS3B,EAAK2B,KAAO3B,EAAKhC,IAExCiG,EAD+C,OAA7C9H,KAAKa,SAASC,SAASrF,kBACVuE,KAAKa,SAASC,SAASrF,kBAAoB,KAE3CuE,KAAKa,SAASC,SAASzF,OAAS,MAG/C2E,KAAKa,SAASmH,UAAYnE,EAAK0B,KAAO1B,EAAK/B,IAE3CiG,EAD+C,OAA7C/H,KAAKa,SAASC,SAASrF,kBACXuE,KAAKa,SAASC,SAAStF,iBAAmB,KAE1CwE,KAAKa,SAASC,SAASzF,OAAS,OAKpDuH,EAAS0E,SAASxE,EAAI,gBAAiBgF,GACvClF,EAAS0E,SAASxE,EAAI,eAAgBiF,KAI1Cb,EAAAhF,UAAA+F,eAAA,eACMC,EAAW,GACXC,EAAe,GACfC,EAAe,GACfC,EAAe,GACfrI,KAAKa,SAASC,SAAS/G,WAAaC,EAASlB,KAC/CoP,EAAWlO,EAASlB,IACpBqP,EAAenO,EAASjB,eACxBqP,EAAepO,EAAShB,iBACxBqP,EAAerO,EAASf,OACf+G,KAAKa,SAASC,SAAS/G,WAAaC,EAASjB,gBACtDiH,KAAKa,SAAS6G,aAAe1H,KAAKa,SAAS4G,YAC3CS,EAAWlO,EAASjB,eACpBoP,EAAenO,EAASlB,IACxBsP,EAAepO,EAAShB,iBACxBqP,EAAerO,EAASf,OACf+G,KAAKa,SAASC,SAAS/G,WAAaC,EAAShB,kBACtDgH,KAAKa,SAAS4G,YAAczH,KAAKa,SAAS6G,aAC1CQ,EAAWlO,EAAShB,iBACpBmP,EAAenO,EAASlB,IACxBsP,EAAepO,EAASjB,eACxBsP,EAAerO,EAASf,OACf+G,KAAKa,SAASC,SAAS/G,WAAaC,EAASf,OACtD+G,KAAKa,SAAS4G,YAAczH,KAAKa,SAASC,SAAS7G,eAChD+F,KAAKa,SAASC,SAAS/D,kBAAoB,EAAIiD,KAAKa,SAASC,SAASzF,QACzE2E,KAAKa,SAAS6G,aAAe1H,KAAKa,SAASC,SAAS5G,gBACjD8F,KAAKa,SAASC,SAAS/D,kBAAoB,EAAIiD,KAAKa,SAASC,SAASzF,QACzE6M,EAAWlO,EAASf,MACpBkP,EAAenO,EAASlB,IACxBsP,EAAepO,EAASjB,eACxBsP,EAAerO,EAAShB,kBACfgH,KAAKa,SAASC,SAAS/G,WAAaC,EAASd,eACtD8G,KAAKa,SAAS6G,aAAe1H,KAAKa,SAASC,SAAS5G,gBACjD8F,KAAKa,SAASC,SAAS/D,kBAAoB,EAAIiD,KAAKa,SAASC,SAASzF,QACzE6M,EAAWlO,EAASjB,eACpBoP,EAAenO,EAASlB,IACxBsP,EAAepO,EAAShB,iBACxBqP,EAAerO,EAASf,OACf+G,KAAKa,SAASC,SAAS/G,WAAaC,EAASb,kBACtD6G,KAAKa,SAAS4G,YAAczH,KAAKa,SAASC,SAAS7G,eAChD+F,KAAKa,SAASC,SAAS/D,kBAAoB,EAAIiD,KAAKa,SAASC,SAASzF,QACzE6M,EAAWlO,EAAShB,iBACpBmP,EAAenO,EAASlB,IACxBsP,EAAepO,EAASjB,eACxBsP,EAAerO,EAASf,OAGtB+G,KAAKa,SAASuG,OAChBpH,KAAKa,SAAS+B,SAAS0F,YAAYtI,KAAKa,SAASiC,GAAIoF,GAErDlI,KAAKa,SAAS+B,SAASsF,SAASlI,KAAKa,SAASiC,GAAIoF,GAEpDlI,KAAKa,SAAS+B,SAAS0F,YAAYtI,KAAKa,SAASiC,GAAIqF,GACrDnI,KAAKa,SAAS+B,SAAS0F,YAAYtI,KAAKa,SAASiC,GAAIsF,GACrDpI,KAAKa,SAAS+B,SAAS0F,YAAYtI,KAAKa,SAASiC,GAAIuF,IAGvDnB,EAAAhF,UAAAqG,mBAAA,SAAmB9B,GACjB,OAAAI,EAAA,GACK7G,KAAKwI,gBAAgBxI,KAAKa,SAAS4G,YAAchB,GAAE,CACtDkB,MAAO3H,KAAKa,SAAS4G,YAAczH,KAAKa,SAASC,SAASzF,OAAS,KACnEuM,OAAQ5H,KAAKa,SAAS4H,SAAShI,OAAST,KAAKa,SAAS6G,aAAe1H,KAAKa,SAASC,SAASzF,OAAS,QAIzG6L,EAAAhF,UAAAwG,gBAAA,SAAgBjC,GACd,OAAAI,EAAA,GACK7G,KAAK2I,eAAe3I,KAAKa,SAAS6G,aAAejB,GAAE,CACtDkB,MAAO3H,KAAKa,SAAS+H,YAAYnI,OAAST,KAAKa,SAAS4G,YAAczH,KAAKa,SAASC,SAASzF,OAAS,KACtGuM,OAAQ5H,KAAKa,SAAS6G,aAAe1H,KAAKa,SAASC,SAASzF,OAAS,QAIzE6L,EAAAhF,UAAAsG,gBAAA,SAAgBK,GACd,OAAI7I,KAAKa,SAASC,SAASnF,wBAClB,CACLmN,UAAW,cAAgBD,EAAI,OAG1B,CACL7D,KAAOhF,KAAK+I,gBAAkBF,EAAK,OAKzC3B,EAAAhF,UAAAyG,eAAA,SAAeE,GACb,OAAI7I,KAAKa,SAASC,SAASnF,wBAClB,CACLmN,UAAW,cAAgBD,EAAI,OAG1B,CACL3D,IAAKlF,KAAKgJ,eAAiBH,EAAI,OAKrC3B,EAAAhF,UAAAmF,kBAAA,SAAkBzE,EAAqBE,GACjC9C,KAAKa,SAASC,SAASnF,wBACzBiH,EAAS0E,SAASxE,EAAI,YAAa,KAEnCF,EAAS0E,SAASxE,EAAI,MAAO,IAC7BF,EAAS0E,SAASxE,EAAI,OAAQ,MAIlCoE,EAAAhF,UAAA2F,gBAAA,SAAgBjF,EAAqBE,EAAShB,EAAWD,GACvD,GAAI7B,KAAKa,SAASC,SAASnF,wBAAyB,KAC5CmN,EAAY,eAAiBhH,EAAI,OAASD,EAAI,SACpDe,EAAS0E,SAASxE,EAAI,YAAagG,QAEnClG,EAAS0E,SAASxE,EAAI,OAAQ9C,KAAK+I,gBAAkBjH,EAAI,MACzDc,EAAS0E,SAASxE,EAAI,MAAO9C,KAAKgJ,eAAiBnH,EAAI,OAI3DqF,EAAAhF,UAAA6G,cAAA,WACE,OAAI/I,KAAKa,SAASC,SAASxF,YACsB,OAA3C0E,KAAKa,SAASC,SAASpF,gBAClBsE,KAAKa,SAASC,SAASpF,gBAEvBsE,KAAKa,SAASC,SAASzF,OAGzB,GAIX6L,EAAAhF,UAAA8G,aAAA,WACE,OAAIhJ,KAAKa,SAASC,SAASxF,YACqB,OAA1C0E,KAAKa,SAASC,SAASvF,eAClByE,KAAKa,SAASC,SAASvF,eAEvByE,KAAKa,SAASC,SAASzF,OAGzB,uBAnMZ0G,EAAAA,sDAJOC,KA0MRkF,EAtMA,GCNA+B,EAAA,WAsDE,SAAAA,EAAYnG,EAAuBF,EAA4BmB,EAAiCT,GAA7DtD,KAAA4C,SAAAA,EAA4B5C,KAAA+D,MAAAA,EAAiC/D,KAAAsD,KAAAA,EARhGtD,KAAA4I,YAAc,GACd5I,KAAAyI,SAAW,GAQTzI,KAAK8C,GAAKA,EAAGoG,cACblJ,KAAKc,SAAWqI,KAAKC,MAAMD,KAAKE,UAAUvP,IAC1CkG,KAAKsJ,wBAA0BlK,EAAcO,SAASK,KAAKuJ,gBAAgBvG,KAAKhD,MAAO,GACvFA,KAAKoH,QAAS,EACdpH,KAAKuH,SAAW,EAChBvH,KAAKwJ,UAAY,EACjBxJ,KAAKwG,KAAO,GACZxG,KAAKyH,YAAc,EACnBzH,KAAK0H,aAAe,EACpB1H,KAAKyJ,gBAAiB,EACtBzJ,KAAK0J,UAAY,IAAIzH,EAAkBjC,MACvCA,KAAK2J,QAAU,IAAI/D,EAAgB5F,MACnCA,KAAK4J,aAAe,IAAI1C,EAAiBlH,MA6a7C,OA1aSiJ,EAAAY,uBAAP,SAA8BhG,EAAoBiG,GAChD,OAAOjG,EAAK/B,EAAIgI,EAAMhI,EAAIgI,EAAMvE,MAC3B1B,EAAK/B,EAAI+B,EAAK0B,KAAOuE,EAAMhI,GAC3B+B,EAAKhC,EAAIiI,EAAMjI,EAAIiI,EAAMtE,MACzB3B,EAAKhC,EAAIgC,EAAK2B,KAAOsE,EAAMjI,GAGlCoH,EAAA/G,UAAA6H,SAAA,WACM/J,KAAK2C,QAAQ/G,cACfoE,KAAK2C,QAAQ/G,aAAaoE,OAI9BiJ,EAAA/G,UAAA8H,YAAA,SAAYC,GACNA,EAAQtH,UACV3C,KAAKkK,aACLlK,KAAK2C,QAAQwH,IAAM,CACjBC,eAAgBpK,KAAKoK,eAAepH,KAAKhD,MACzCqK,OAAQrK,KAAKsK,SAAStH,KAAKhD,MAC3BuK,wBAAyBvK,KAAKuK,wBAAwBvH,KAAKhD,MAC3DwK,yBAA0BxK,KAAKwK,yBAAyBxH,KAAKhD,MAC7DyK,wBAAyBzK,KAAKyK,wBAAwBzH,KAAKhD,OAE7DA,KAAKgI,QAAUhI,KAAKc,SAASrG,QAC7BuF,KAAKwF,KAAOxF,KAAKc,SAASnG,QAC1BqF,KAAK3F,cACL2F,KAAKuJ,oBAITN,EAAA/G,UAAAmI,OAAA,eACMzC,EACAD,EAMFC,EAL6B,QAA3B5H,KAAKc,SAAS/G,UAAuBiG,KAAKoH,QAI5CO,EAAQ3H,KAAK8C,GAAG4H,YACP1K,KAAK8C,GAAG6H,eAJjBhD,EAAQ3H,KAAK8C,GAAG8H,YACP5K,KAAK8C,GAAG+H,cAKdlD,IAAU3H,KAAKuH,UAAYK,IAAW5H,KAAKwJ,YAAcxJ,KAAK8K,mBACjE9K,KAAKsK,YAITrB,EAAA/G,UAAAgI,WAAA,WACElK,KAAKc,SAAW1B,EAAcC,MAAMW,KAAKc,SAAUd,KAAK2C,QAAS3C,KAAKc,UACjEd,KAAKc,SAAS9B,qBAAwBgB,KAAK+K,aAErC/K,KAAKc,SAAS9B,qBAAuBgB,KAAK+K,eACnD/K,KAAK+K,eACL/K,KAAK+K,aAAe,MAHpB/K,KAAK+K,aAAe/K,KAAK4C,SAASC,OAAO,SAAU,SAAU7C,KAAKsK,SAAStH,KAAKhD,OAKlFA,KAAK0J,UAAUlH,iBAGjByG,EAAA/G,UAAAkI,eAAA,WACEpK,KAAKkK,aAEL,QADIc,EAAuBhL,KAAKwG,KAAK/F,OAAS,EACvB,GAAhBuK,EAAmBA,IACfhL,KAAKwG,KAAKwE,GACZxI,gBAETxC,KAAKuJ,mBAGPN,EAAA/G,UAAA+I,YAAA,WACMjL,KAAK+K,cACP/K,KAAK+K,eAEH/K,KAAK2C,QAAQ7G,iBACfkE,KAAK2C,QAAQ7G,gBAAgBkE,MAE3BA,KAAK2C,QAAQwH,MACfnK,KAAK2C,QAAQwH,IAAIE,OAASxO,UAC1BmE,KAAK2C,QAAQwH,IAAIC,eAAiBvO,UAClCmE,KAAK2C,QAAQwH,IAAII,wBAA0B1O,UAC3CmE,KAAK2C,QAAQwH,IAAMtO,WAErBmE,KAAK0J,UAAUvH,iBACRnC,KAAK0J,UACZ1J,KAAK2J,QAAQxH,iBACNnC,KAAK2J,SAGdV,EAAA/G,UAAAoI,SAAA,WACEtK,KAAK3F,cACL2F,KAAKuJ,mBAGPN,EAAA/G,UAAA4I,gBAAA,eACQJ,EAAc1K,KAAK8C,GAAG4H,YACtBE,EAAc5K,KAAK8C,GAAG8H,YACtBM,EAAclL,KAAK8C,GAAGoI,YACtBP,EAAe3K,KAAK8C,GAAG6H,aACvBE,EAAe7K,KAAK8C,GAAG+H,aACvBM,EAAenL,KAAK8C,GAAGqI,aAK7B,QAJ8BT,EAAcE,GAA8BC,EAAfM,GACtDA,EAAeN,EAAeD,EAAcF,MACjBC,EAAeE,GAC5BD,EAAdM,GAA6BA,EAAcN,EAAcC,EAAeF,IAO/E1B,EAAA/G,UAAA7H,YAAA,eACQyI,EAAK9C,KAAK8C,GACZ6E,EAAQ7E,EAAG4H,YACX9C,EAAS9E,EAAG6H,aAGd/C,EAFE5H,KAAKc,SAASzG,aAA0C,QAA3B2F,KAAKc,SAAS/G,WAAuBiG,KAAKoH,QACzEO,EAAQ7E,EAAG8H,YACF9H,EAAG+H,eAEZlD,EAAQ7E,EAAG4H,YACF5H,EAAG6H,cAEd3K,KAAKuH,SAAWI,EAChB3H,KAAKwJ,UAAY5B,GAGnBqB,EAAA/G,UAAAkJ,kBAAA,WACEpL,KAAK3F,eACA2F,KAAKoH,QAAUpH,KAAKc,SAAStG,iBAAmBwF,KAAKuH,UACxDvH,KAAKoH,QAAUpH,KAAKoH,OACpBpH,KAAK4C,SAASsF,SAASlI,KAAK8C,GAAI,WACvB9C,KAAKoH,QAAUpH,KAAKc,SAAStG,iBAAmBwF,KAAKuH,WAC9DvH,KAAKoH,QAAUpH,KAAKoH,OACpBpH,KAAK4C,SAAS0F,YAAYtI,KAAK8C,GAAI,WAKrC,QADyCuD,EAFrCb,EAAOxF,KAAKc,SAASnG,QAASqN,EAAUhI,KAAKc,SAASrG,QAEtDuQ,EAAehL,KAAKwG,KAAK/F,OAAS,EACf,GAAhBuK,EAAmBA,KACxB3E,EAASrG,KAAKwG,KAAKwE,IACPK,YACV7F,EAAOJ,KAAKkG,IAAI9F,EAAMa,EAAOK,MAAM7E,EAAIwE,EAAOK,MAAMlB,MACpDwC,EAAU5C,KAAKkG,IAAItD,EAAS3B,EAAOK,MAAM5E,EAAIuE,EAAOK,MAAMnB,OAI1DvF,KAAKgI,UAAYA,GAAWhI,KAAKwF,OAASA,IAC5CxF,KAAKgI,QAAUA,EACfhI,KAAKwF,KAAOA,EACRxF,KAAK2C,QAAQ5G,yBACfiE,KAAK2C,QAAQ5G,wBAAwBiE,QAK3CiJ,EAAA/G,UAAAqH,gBAAA,WAME,GALIvJ,KAAK2J,SACP3J,KAAK2J,QAAQ9D,eAGf7F,KAAKoL,oBACDpL,KAAKc,SAASxF,YAAa,KACzBiQ,GAAevL,KAAKc,SAASzF,OACK,OAAlC2E,KAAKc,SAASpF,iBAChB6P,GAAevL,KAAKc,SAASpF,gBAC7BsE,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,eAAgB9C,KAAKc,SAASpF,gBAAkB,QAEhF6P,GAAevL,KAAKc,SAASzF,OAC7B2E,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,eAAgB9C,KAAKc,SAASzF,OAAS,OAElC,OAAnC2E,KAAKc,SAAStF,kBAChB+P,GAAevL,KAAKc,SAAStF,iBAC7BwE,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,gBAAiB9C,KAAKc,SAAStF,iBAAmB,QAElF+P,GAAevL,KAAKc,SAASzF,OAC7B2E,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,gBAAiB9C,KAAKc,SAASzF,OAAS,OAE1E2E,KAAKyH,aAAezH,KAAKuH,SAAWgE,GAAevL,KAAKgI,YACpDwD,GAAgBxL,KAAKc,SAASzF,OACG,OAAjC2E,KAAKc,SAASvF,gBAChBiQ,GAAgBxL,KAAKc,SAASvF,eAC9ByE,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,cAAe9C,KAAKc,SAASvF,eAAiB,QAE9EiQ,GAAgBxL,KAAKc,SAASzF,OAC9B2E,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,cAAe9C,KAAKc,SAASzF,OAAS,OAEhC,OAApC2E,KAAKc,SAASrF,mBAChB+P,GAAgBxL,KAAKc,SAASrF,kBAC9BuE,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,iBAAkB9C,KAAKc,SAASrF,kBAAoB,QAEpF+P,GAAgBxL,KAAKc,SAASzF,OAC9B2E,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,iBAAkB9C,KAAKc,SAASzF,OAAS,OAE3E2E,KAAK0H,cAAgB1H,KAAKwJ,UAAYgC,GAAgBxL,KAAKwF,UAE3DxF,KAAKyH,aAAezH,KAAKuH,SAAWvH,KAAKc,SAASzF,QAAU2E,KAAKgI,QACjEhI,KAAK0H,cAAgB1H,KAAKwJ,UAAYxJ,KAAKc,SAASzF,QAAU2E,KAAKwF,KACnExF,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,eAAgB,OAChD9C,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,gBAAiB,OACjD9C,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,cAAe,OAC/C9C,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,iBAAkB,OAEpD9C,KAAK4J,aAAa3B,iBAElBjI,KAAKyL,aAEDzL,KAAKc,SAASzG,aAChB2F,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,QAAU9C,KAAKgI,QAAUhI,KAAKyH,YAAczH,KAAKc,SAASzF,OAAU,MACpG2E,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,SAAW9C,KAAKwF,KAAOxF,KAAK0H,aAAe1H,KAAKc,SAASzF,OAAU,QAEnG2E,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,QAAS,IACzC9C,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,SAAU,KAI5C,QADiDuD,EAA7C2E,EAAuBhL,KAAKwG,KAAK/F,OAAS,EACvB,GAAhBuK,EAAmBA,KACxB3E,EAASrG,KAAKwG,KAAKwE,IACZU,UACPrF,EAAOsF,KAAKC,SACZvF,EAAOgE,OAAOuB,SAGhBxL,WAAWJ,KAAKqK,OAAOrH,KAAKhD,MAAO,MAGrCiJ,EAAA/G,UAAAuJ,WAAA,WACoC,WAA9BzL,KAAKc,SAAShC,aAA6BkB,KAAKoH,OAEX,kBAA9BpH,KAAKc,SAAShC,aAAmCkB,KAAKyJ,eAC/DzJ,KAAK4C,SAASsF,SAASlI,KAAK8C,GAAI,gBACO,SAA9B9C,KAAKc,SAAShC,aAA2BkB,KAAKyJ,iBAAkBzJ,KAAKoH,QAC9EpH,KAAK4C,SAAS0F,YAAYtI,KAAK8C,GAAI,gBAJnC9C,KAAK4C,SAASsF,SAASlI,KAAK8C,GAAI,gBAMlC9C,KAAKoL,oBACLpL,KAAK4I,YAAYnI,OAAS2E,KAAKkG,IAAItL,KAAKgI,QAAS5C,KAAKC,MAAMrF,KAAKuH,SAAWvH,KAAKyH,eAAiB,EAClGzH,KAAKyI,SAAShI,OAAS2E,KAAKkG,IAAItL,KAAKwF,KAAMJ,KAAKC,MAAMrF,KAAKwJ,UAAYxJ,KAAK0H,gBAAkB,EAC9F1H,KAAK+D,MAAMC,gBAGbiF,EAAA/G,UAAA2J,QAAA,SAAQC,GACFA,EAAcpF,MAAMnB,OAAS1J,YAC/BiQ,EAAcpF,MAAMnB,KAAOvF,KAAKc,SAASjG,gBACzCiR,EAAcjI,KAAK0B,KAAOuG,EAAcpF,MAAMnB,KAC9CuG,EAAclF,eAEZkF,EAAcpF,MAAMlB,OAAS3J,YAC/BiQ,EAAcpF,MAAMlB,KAAOxF,KAAKc,SAAShG,gBACzCgR,EAAcjI,KAAK2B,KAAOsG,EAAcpF,MAAMlB,KAC9CsG,EAAclF,gBAEe,IAA3BkF,EAAcpF,MAAM5E,IAAuC,IAA3BgK,EAAcpF,MAAM7E,EACtD7B,KAAK+L,iBAAiBD,GACb9L,KAAK2F,eAAemG,EAAcpF,SACtC1G,KAAKc,SAAS7B,kBACjB6M,EAAcT,WAAY,EAC1BW,QAAQC,KAAK,6EACX9C,KAAKE,UAAUyC,EAAcjI,KAAM,CAAC,OAAQ,OAAQ,IAAK,QAExD7D,KAAKc,SAAS3B,8BAGjB2M,EAAcT,WAAY,EAF1BrL,KAAK+L,iBAAiBD,IAK1B9L,KAAKwG,KAAK0F,KAAKJ,GACf9L,KAAKsJ,2BAGPL,EAAA/G,UAAAiK,WAAA,SAAWL,GACT9L,KAAKwG,KAAK4F,OAAOpM,KAAKwG,KAAKhF,QAAQsK,GAAgB,GACnD9L,KAAKsJ,0BACDtJ,KAAK2C,QAAQxG,qBACf6D,KAAK2C,QAAQxG,oBAAoB2P,EAAcjI,KAAMiI,IAIzD7C,EAAA/G,UAAAyD,eAAA,SAAe9B,OACTwI,GAAsD,EAO1D,GANIrM,KAAK2C,QAAQvG,uBACfiQ,GAAarM,KAAK2C,QAAQvG,qBAAqByH,KAE5CwI,GAAarM,KAAKsM,mBAAmBzI,KACxCwI,GAAY,IAETA,EAAW,KACRE,EAAIvM,KAAKwM,iBAAiB3I,GAC5B0I,IACFF,EAAYE,GAGhB,OAAOF,GAGTpD,EAAA/G,UAAAoK,mBAAA,SAAmBzI,OACX4I,GAA+B,EAAV5I,EAAKhC,IAAoB,EAAVgC,EAAK/B,EACzC4K,EAAc7I,EAAK0B,KAAO1B,EAAK/B,GAAK9B,KAAKc,SAASpG,QAClDiS,EAAc9I,EAAK2B,KAAO3B,EAAKhC,GAAK7B,KAAKc,SAASlG,QAClDG,EAAc8I,EAAK9I,cAAgBc,UAAYmE,KAAKc,SAAS/F,YAAc8I,EAAK9I,YAChFE,EAAc4I,EAAK5I,cAAgBY,UAAYmE,KAAKc,SAAS7F,YAAc4I,EAAK5I,YAChFD,EAAc6I,EAAK7I,cAAgBa,UAAYmE,KAAKc,SAAS9F,YAAc6I,EAAK7I,YAChFE,EAAc2I,EAAK3I,cAAgBW,UAAYmE,KAAKc,SAAS5F,YAAc2I,EAAK3I,YAChF0R,EAAe/I,EAAK0B,MAAQxK,GAAe8I,EAAK0B,MAAQtK,EACxD4R,EAAehJ,EAAK2B,MAAQxK,GAAe6I,EAAK2B,MAAQtK,EACxD4R,EAAejJ,EAAK1I,cAAgBU,UAAYmE,KAAKc,SAAS3F,YAAc0I,EAAK1I,YACjF4R,EAAelJ,EAAKzI,cAAgBS,UAAYmE,KAAKc,SAAS1F,YAAcyI,EAAKzI,YACjF4R,EAAOnJ,EAAK0B,KAAO1B,EAAK2B,KAG9B,QAASiH,GAAsBC,GAAeC,GAAeC,GAAgBC,GAF3DC,GAAgBE,GACAA,GAAhBD,IAIpB9D,EAAA/G,UAAAsK,iBAAA,SAAiB3I,GAEf,QADiDwC,EAA7C2E,EAAuBhL,KAAKwG,KAAK/F,OAAS,GACvB,EAAhBuK,EAAmBA,IAExB,IADA3E,EAASrG,KAAKwG,KAAKwE,IACRtE,QAAU7C,GAAQoF,EAAkBY,uBAAuBxD,EAAOK,MAAO7C,GAClF,OAAOwC,EAGX,OAAO,GAGT4C,EAAA/G,UAAA+K,kBAAA,SAAkBpJ,GAGhB,QADiDwC,EAD3C1E,EAA2C,GAC7CqJ,EAAuBhL,KAAKwG,KAAK/F,OAAS,GACvB,EAAhBuK,EAAmBA,KACxB3E,EAASrG,KAAKwG,KAAKwE,IACRtE,QAAU7C,GAAQoF,EAAkBY,uBAAuBxD,EAAOK,MAAO7C,IAClFlC,EAAEuK,KAAK7F,GAGX,OAAO1E,GAGTsH,EAAA/G,UAAA6J,iBAAA,SAAiBD,GACX9L,KAAKuK,wBAAwBuB,EAAcpF,QAC7CoF,EAAcT,WAAY,EAC1BS,EAAcjI,KAAK/B,EAAIgK,EAAcpF,MAAM5E,EAC3CgK,EAAcjI,KAAKhC,EAAIiK,EAAcpF,MAAM7E,EAC3CiK,EAAclF,gBAEdkF,EAAcT,WAAY,EACrBrL,KAAKc,SAAS7B,iBACjB+M,QAAQC,KAAK,oDACX9C,KAAKE,UAAUyC,EAAcjI,KAAM,CAAC,OAAQ,OAAQ,IAAK,SAKjEoF,EAAA/G,UAAAqI,wBAAA,SAAwB2C,EAAuBC,QAAA,IAAAA,IAAAA,EAAA,KACvB,IAAlBD,EAAQ3H,OACV2H,EAAQ3H,KAAOvF,KAAKc,SAASjG,kBAET,IAAlBqS,EAAQ1H,OACV0H,EAAQ1H,KAAOxF,KAAKc,SAAShG,iBAE/BkF,KAAKoL,oBAEL,QADqCgC,EAAjCC,EAAYF,EAAatL,GAAK,EAC3BwL,EAAYrN,KAAKwF,KAAM6H,IAG5B,IAFAH,EAAQrL,EAAIwL,EACZD,EAAYD,EAAarL,GAAK,EACvBsL,EAAYpN,KAAKgI,QAASoF,IAE/B,GADAF,EAAQpL,EAAIsL,GACPpN,KAAK2F,eAAeuH,GACvB,OAAO,MAIPI,EAAetN,KAAKc,SAASlG,SAAWoF,KAAKwF,KAAO0H,EAAQ1H,KAC5D+H,EAAkBvN,KAAKc,SAASpG,SAAWsF,KAAKgI,QAAUkF,EAAQ3H,KAExE,QADkBvF,KAAKwF,MAAQxF,KAAKgI,SAAWsF,IAC7BC,GAChBL,EAAQpL,EAAI9B,KAAKgI,UACjBkF,EAAQrL,EAAI,MAEHyL,IACTJ,EAAQrL,EAAI7B,KAAKwF,OACjB0H,EAAQpL,EAAI,KAMhBmH,EAAA/G,UAAAsI,yBAAA,SAAyB3G,OACjB2J,EAAU1G,OAAOC,OAAO,GAAIlD,GAElC,OADA7D,KAAKuK,wBAAwBiD,GACtBA,GAGTvE,EAAA/G,UAAAuI,wBAAA,SAAwB5G,OAClB4J,EAAyC,CAAC5L,EAAG,EAAGC,EAAG,GACvD2L,EAAezN,KAAKwG,KAAKkH,OAAO,SAACC,EAAWC,OACpCC,EAAa,CAAChM,EAAG+L,EAAKlH,MAAM7E,EAAI+L,EAAKlH,MAAMlB,KAAO,EAAG1D,EAAG8L,EAAKlH,MAAM5E,EAAI8L,EAAKlH,MAAMnB,KAAO,GAC/F,OAAqD,IAAjDnG,EAAcsC,aAAaiM,EAAME,GAC5BA,EAEAF,GAERF,OAEGD,EAAU1G,OAAOC,OAAO,GAAIlD,GAElC,OADA7D,KAAKuK,wBAAwBiD,EAASC,GAC/BD,GAGTvE,EAAA/G,UAAAiD,kBAAA,SAAkBrD,EAAWgM,EAA0BC,OAC/CC,EAAWF,EAAehM,EAAI9B,KAAKyH,aACzC,OAAIsG,EACKC,EAEA5I,KAAKkG,IAAI0C,EAAU,IAI9B/E,EAAA/G,UAAAoD,kBAAA,SAAkBzD,EAAWiM,EAA0BC,OAC/CC,EAAWF,EAAejM,EAAI7B,KAAK0H,cACzC,OAAIqG,EACKC,EAEA5I,KAAKkG,IAAI0C,EAAU,IAI9B/E,EAAA/G,UAAA+L,kBAAA,SAAkBnM,GAChB,OAAOA,EAAI9B,KAAKyH,aAGlBwB,EAAA/G,UAAAgM,kBAAA,SAAkBrM,GAChB,OAAOA,EAAI7B,KAAK0H,kCArdnByG,EAAAA,UAASlO,KAAA,CAAC,CACTmO,SAAU,WACVC,SAAA,4WAEAC,cAAeC,EAAAA,kBAAkBjV,44BA1BjCkV,EAAAA,kBAMAC,EAAAA,iBARAC,EAAAA,yBAIAC,EAAAA,2CA2BCC,EAAAA,SAgdH3F,EAhfA,KCMA,SAAA4F,MCNAC,EAAA,WAWE,SAAAA,EAAYC,GACV/O,KAAK+O,aAAeA,EACpB/O,KAAKa,SAAWkO,EAAalO,SA0EjC,OAvEEiO,EAAA5M,UAAAC,QAAA,kBACSnC,KAAKa,gBACLb,KAAK+O,oBACL/O,KAAKgP,YAGdF,EAAA5M,UAAA+M,UAAA,WACMjP,KAAKa,SAASC,SAAS1C,OACzB4B,KAAKkP,gBACLlP,KAAKmP,UAAUnP,KAAK+O,gBAIxBD,EAAA5M,UAAAgN,cAAA,WACE,GAAIlP,KAAKgP,WAAY,KACblN,EAAY9B,KAAKgP,WAAWtI,MAAM5E,EAClCD,EAAY7B,KAAKgP,WAAWtI,MAAM7E,EACxC7B,KAAKgP,WAAWtI,MAAM5E,EAAI9B,KAAKgP,WAAWnL,KAAK/B,GAAK,EACpD9B,KAAKgP,WAAWtI,MAAM7E,EAAI7B,KAAKgP,WAAWnL,KAAKhC,GAAK,EAChD7B,KAAKa,SAAS8E,eAAe3F,KAAKgP,WAAWtI,QAC/C1G,KAAKgP,WAAWtI,MAAM5E,EAAIA,EAC1B9B,KAAKgP,WAAWtI,MAAM7E,EAAIA,IAE1B7B,KAAKgP,WAAWtD,UAChB1L,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAK+O,aAAalL,KAAK/B,GAAK,EACxD9B,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAK+O,aAAalL,KAAKhC,GAAK,EACxD7B,KAAKgP,WAAanT,aAMxBiT,EAAA5M,UAAAkN,gBAAA,WACMpP,KAAKgP,aACPhP,KAAKgP,WAAWtI,MAAM5E,EAAI9B,KAAKgP,WAAWnL,KAAK/B,GAAK,EACpD9B,KAAKgP,WAAWtI,MAAM7E,EAAI7B,KAAKgP,WAAWnL,KAAKhC,GAAK,EACpD7B,KAAKgP,WAAWtD,UAChB1L,KAAKgP,WAAanT,YAItBiT,EAAA5M,UAAAmN,YAAA,WACMrP,KAAKgP,aACPhP,KAAKgP,WAAWM,iBAAiBtP,KAAKgP,WAAWtI,MAAO1G,KAAKgP,WAAWnL,MACxE7D,KAAKgP,WAAanT,YAItBiT,EAAA5M,UAAAiN,UAAA,SAAUI,OACFC,EAA6BxP,KAAKa,SAAS8E,eAAe4J,EAAS7I,OACzE,GAAI8I,IAAmD,IAA1BA,GAAkCA,EAAsBC,eAAgB,KAC7FC,EAAsDF,EACtDG,EAAiBD,EAAoBhJ,MAAM5E,EAC3C8N,EAAiBF,EAAoBhJ,MAAM7E,EAC3CgO,EAAQN,EAAS7I,MAAM5E,EACvBgO,EAAQP,EAAS7I,MAAM7E,EAC7B6N,EAAoBhJ,MAAM5E,EAAIyN,EAAS1L,KAAK/B,GAAK,EACjD4N,EAAoBhJ,MAAM7E,EAAI0N,EAAS1L,KAAKhC,GAAK,EACjD0N,EAAS7I,MAAM5E,EAAI4N,EAAoB7L,KAAK/B,GAAK,EACjDyN,EAAS7I,MAAM7E,EAAI6N,EAAoB7L,KAAKhC,GAAK,EAC7C7B,KAAKa,SAAS8E,eAAe+J,EAAoBhJ,QAAU1G,KAAKa,SAAS8E,eAAe4J,EAAS7I,QACnG6I,EAAS7I,MAAM5E,EAAI+N,EACnBN,EAAS7I,MAAM7E,EAAIiO,EACnBJ,EAAoBhJ,MAAM5E,EAAI6N,EAC9BD,EAAoBhJ,MAAM7E,EAAI+N,IAE9BF,EAAoBhE,UACpB1L,KAAKgP,WAAaU,yBA9EzB3N,EAAAA,sDAHO8M,KAqFRC,EAvFA,GXKMiB,EAAmB,GASzB,SAAgBC,EAAOnP,EAAsCmE,EAAcE,EAAayC,EAAeC,EAChF/J,EAAeoS,EACfC,EAAiC7F,EAAkB8F,GACxE9X,EAAoBwI,EAASC,SAASzI,kBACtCC,EAAcuI,EAASC,SAASxI,YAChCC,EAAkBsI,EAASiC,GAC3BtK,EAAc6R,EACd5R,EAAkB0X,MAEZvF,EAAcrS,EAAgBqS,YAC9BC,EAAetS,EAAgBsS,aAC/BuF,EAAa7X,EAAgBwM,WAC7BsL,EAAY9X,EAAgB0M,UAC5BqL,EAAgBpL,EAAMmL,EACtBE,EAAmB1F,EAAewF,EAAYnL,EAAM0C,EAC1D,GAAIqI,EAAUvP,QAAU7C,EAAE6C,SAAW6P,EAAmBlY,EAAmB,CAEzE,GADAmY,IACKhY,GAAeC,IAAoBA,EAAgBmF,GAAM/E,EAC5D,OAEFA,EAAY4X,EAAc,EAAGP,EAAuBD,QAC/C,GAAIA,EAAUvP,QAAU7C,EAAE6C,SAAuB,EAAZ2P,GAAiBC,EAAgBjY,EAAmB,CAE9F,GADAqY,IACKlY,GAAeC,IAAoBA,EAAgBqF,GAAMlF,EAC5D,OAEFA,EAAY6X,GAAe,EAAGP,EAAuBD,QAC5CA,EAAUvP,UAAY7C,EAAE6C,SACjCiQ,QAGIC,EAAkBR,EAAaxF,EAAc5F,EAAO2C,EACpDkJ,EAAiB7L,EAAOoL,EAC9B,GAAIH,EAAU1P,QAAU1C,EAAE0C,SAAWqQ,GAAmBvY,EAAmB,CAEzE,GADAyY,IACKtY,GAAeC,IAAoBA,EAAgBoF,GAAMnF,EAC5D,OAEFA,EAAYqY,EAAgB,EAAGb,EAAuBD,QACjD,GAAIA,EAAU1P,QAAU1C,EAAE0C,SAAwB,EAAb6P,GAAkBS,EAAiBxY,EAAmB,CAEhG,GADA2Y,IACKxY,GAAeC,IAAoBA,EAAgBsF,GAAMpF,EAC5D,OAEFA,EAAYoY,GAAiB,EAAGb,EAAuBD,QAC9CA,EAAU1P,UAAY1C,EAAE0C,SACjC0Q,IAIJ,SAASR,EAAcS,EAAchB,EAAiCD,OAChEvP,EAAUuP,EAAUvP,QACxB,OAAOyQ,YAAY,aACZ5Y,IAA6B,IAAV2Y,GAAe3Y,EAAgB0M,UAAY3M,EAAc,IAC/EqY,IAEFpY,EAAgB0M,WAAaiM,EAAO5Y,EACpCoI,GAAWwQ,EAAO5Y,EAClB4X,EAAsB,CAAC3P,QAAS0P,EAAU1P,QAASG,QAASA,KAC3DqP,GAGL,SAASgB,EAAgBG,EAAchB,EAAiCD,OAClE1P,EAAU0P,EAAU1P,QACxB,OAAO4Q,YAAY,aACZ5Y,IAA6B,IAAV2Y,GAAe3Y,EAAgBwM,WAAazM,EAAc,IAChF2Y,IAEF1Y,EAAgBwM,YAAcmM,EAAO5Y,EAErC4X,EAAsB,CAAC3P,QADvBA,GAAW2Q,EAAO5Y,EACuBoI,QAASuP,EAAUvP,WAC3DqP,GAGL,SAAgBqB,IACdH,IACAN,IACApY,EAAkBsD,UAGpB,SAASoV,IACPD,IACAF,IAGF,SAASH,IACPH,IACAE,IAGF,SAASM,IACHtY,IACF2Y,cAAc3Y,GACdA,EAAY,GAIhB,SAASoY,IACHnY,IACF0Y,cAAc1Y,GACdA,EAAY,GAIhB,SAAS+X,IACH7X,IACFwY,cAAcxY,GACdA,EAAY,GAIhB,SAAS2X,IACH5X,IACFyY,cAAczY,GACdA,EAAY,GYhIhB,IAAA0Y,EAAA,WA0BE,SAAAA,EAAYvC,GACV/O,KAAKuR,YAAc,GACnBvR,KAAKwR,gBAAkB,GACvBxR,KAAKyR,oBAAsB,GAC3BzR,KAAK0R,gBAAkB,GACvB1R,KAAK+O,aAAeA,EACpB/O,KAAKa,SAAWkO,EAAalO,SAC7Bb,KAAK2R,WAAa,CAChBC,SAAU,CAAC5R,KAAK6R,QAAS7R,KAAK8R,SAAU9R,KAAK+R,SAAU/R,KAAKgS,SAC5DC,SAAU,CAACjS,KAAKgS,QAAShS,KAAK8R,SAAU9R,KAAK+R,SAAU/R,KAAK6R,SAC5DK,UAAW,CAAClS,KAAK8R,SAAU9R,KAAKgS,QAAShS,KAAK6R,QAAS7R,KAAK+R,UAC5DI,UAAW,CAACnS,KAAK+R,SAAU/R,KAAKgS,QAAShS,KAAK6R,QAAS7R,KAAK8R,WAE9D9R,KAAKmS,UAAY,YACjBnS,KAAKkS,UAAY,YACjBlS,KAAK4R,SAAW,WAChB5R,KAAKiS,SAAW,WAgRpB,OA7QEX,EAAApP,UAAAC,QAAA,kBACSnC,KAAKa,gBACLb,KAAK+O,cAGduC,EAAApP,UAAA7D,UAAA,SAAU+T,EAAmBC,GAC3B,IAAIrS,KAAKa,SAASC,SAASzC,WAAcgU,EAWvC,OAAO,EAVPrS,KAAKsS,iBAAmB,OAClBC,EAASvS,KAAKkM,KAAKlM,KAAK+O,aAAcqD,GAO5C,OANKG,GACHvS,KAAKwS,mBAEPxS,KAAKsS,iBAAmB,GACxBtS,KAAKwR,gBAAkB,GACvBxR,KAAKyR,oBAAsB,GACpBc,GAMXjB,EAAApP,UAAAsQ,iBAAA,WAEE,QADI/L,EAAIzG,KAAKwR,gBAAgB/Q,OAAS,GAC1B,EAALgG,EAAQA,IACbzG,KAAKyS,qBAAqBzS,KAAKwR,gBAAgB/K,KAInD6K,EAAApP,UAAAwQ,aAAA,WAIE,QADIC,EAFAlM,EAAI,EACFF,EAAYvG,KAAKuR,YAAY9Q,OAE5BgG,EAAIF,EAAGE,KACZkM,EAAa3S,KAAKuR,YAAY9K,IACnBC,MAAM5E,EAAI6Q,EAAW9O,KAAK/B,GAAK,EAC1C6Q,EAAWjM,MAAM7E,EAAI8Q,EAAW9O,KAAKhC,GAAK,EAC1C8Q,EAAWjH,UAEb1L,KAAKuR,YAAc,GACnBvR,KAAK0R,gBAAkB,IAGzBJ,EAAApP,UAAA0Q,eAAA,WAIE,QADID,EAFAlM,EAAI,EACFF,EAAYvG,KAAKuR,YAAY9Q,OAE5BgG,EAAIF,EAAGE,KACZkM,EAAa3S,KAAKuR,YAAY9K,IACnB6I,iBAAiBqD,EAAWjM,MAAOiM,EAAW9O,MAE3D7D,KAAKuR,YAAc,GACnBvR,KAAK0R,gBAAkB,IAGzBJ,EAAApP,UAAA2Q,cAAA,WAGE,QAFIpM,EAAYzG,KAAKuR,YAAY9Q,OAAS,EACtCqS,GAAS,GACD,EAALrM,EAAQA,IACTzG,KAAK+S,gBAAgB/S,KAAKuR,YAAY9K,GAAIA,KAC5CqM,GAAS,GAGTA,GACF9S,KAAK6S,iBAIDvB,EAAApP,UAAAgK,KAAR,SAAa6C,EAA8CqD,GACzD,GAAIpS,KAAKa,SAASyL,mBAAmByC,EAAarI,OAChD,OAAO,EAET,GAAkB,KAAd0L,EACF,OAAO,EAMT,QAHsBY,EADhBrR,EAA2C3B,KAAKa,SAASoM,kBAAkB8B,EAAarI,OAC1FD,EAAI9E,EAAElB,OAAS,EACfwS,GAAW,EACTrR,EAA2C,IACrC,EAAL6E,EAAQA,IAAK,CAElB,IADAuM,EAAgBrR,EAAE8E,MACIzG,KAAK+O,aAAc,CACvCkE,GAAW,EACX,MAEF,IAAKD,EAAcvD,eAAgB,CACjCwD,GAAW,EACX,MAKF,GAHgBjT,KAAKwR,gBAAgB0B,KAAK,SAACpQ,GACzC,OAAOA,EAAG4D,MAAM5E,IAAMkR,EAActM,MAAM5E,GAAKgB,EAAG4D,MAAM7E,IAAMmR,EAActM,MAAM7E,IAEvE,CACXoR,GAAW,EACX,MAEF,GAAIjT,KAAK2R,WAAWS,GAAW,GAAGnL,KAAKjH,KAAMgT,EAAejE,GAC1D/O,KAAKsS,iBAAiBpG,KAAK8G,GAC3BpR,EAAEsK,KAAK8G,QACF,GAAIhT,KAAK2R,WAAWS,GAAW,GAAGnL,KAAKjH,KAAMgT,EAAejE,GACjE/O,KAAKsS,iBAAiBpG,KAAK8G,GAC3BpR,EAAEsK,KAAK8G,QACF,GAAIhT,KAAK2R,WAAWS,GAAW,GAAGnL,KAAKjH,KAAMgT,EAAejE,GACjE/O,KAAKsS,iBAAiBpG,KAAK8G,GAC3BpR,EAAEsK,KAAK8G,OACF,CAAA,IAAIhT,KAAK2R,WAAWS,GAAW,GAAGnL,KAAKjH,KAAMgT,EAAejE,GAG5D,CACLkE,GAAW,EACX,MAJAjT,KAAKsS,iBAAiBpG,KAAK8G,GAC3BpR,EAAEsK,KAAK8G,IAMX,IAAKC,IAEM,GADTxM,EAAIzG,KAAKsS,iBAAiBa,YAAYvR,EAAE,KAGtC,QADIwR,EAAIpT,KAAKsS,iBAAiB7R,OAAS,EAC3BgG,GAAL2M,EAAQA,IACbJ,EAAgBhT,KAAKsS,iBAAiBc,GACtCpT,KAAKsS,iBAAiBe,MACtBrT,KAAKyS,qBAAqBO,GAC1BhT,KAAKsT,qBAAqBN,GAIhC,OAAOC,GAGD3B,EAAApP,UAAA4P,SAAR,SAAiBpC,EAAqDX,GACpE,QAAK/O,KAAKa,SAASC,SAAStC,eAAeG,QAG3CqB,KAAKuT,gBAAgB7D,GACrBA,EAAoBhJ,MAAM7E,EAAIkN,EAAarI,MAAM7E,EAAIkN,EAAarI,MAAMlB,KACpExF,KAAKkM,KAAKwD,EAAqB1P,KAAKkS,YACtCxC,EAAoBhE,UACpB1L,KAAKwT,YAAY9D,IACV,IAEP1P,KAAKyS,qBAAqB/C,IAErB,KAGD4B,EAAApP,UAAA6P,SAAR,SAAiBrC,EAAqDX,GACpE,QAAK/O,KAAKa,SAASC,SAAStC,eAAeC,QAG3CuB,KAAKuT,gBAAgB7D,GACrBA,EAAoBhJ,MAAM7E,EAAIkN,EAAarI,MAAM7E,EAAI6N,EAAoBhJ,MAAMlB,KAC3ExF,KAAKkM,KAAKwD,EAAqB1P,KAAKmS,YACtCzC,EAAoBhE,UACpB1L,KAAKwT,YAAY9D,IACV,IAEP1P,KAAKyS,qBAAqB/C,IAErB,KAGD4B,EAAApP,UAAA8P,QAAR,SAAgBtC,EAAqDX,GACnE,QAAK/O,KAAKa,SAASC,SAAStC,eAAeE,OAG3CsB,KAAKuT,gBAAgB7D,GACrBA,EAAoBhJ,MAAM5E,EAAIiN,EAAarI,MAAM5E,EAAIiN,EAAarI,MAAMnB,KACpEvF,KAAKkM,KAAKwD,EAAqB1P,KAAKiS,WACtCvC,EAAoBhE,UACpB1L,KAAKwT,YAAY9D,IACV,IAEP1P,KAAKyS,qBAAqB/C,IAErB,KAGD4B,EAAApP,UAAA2P,QAAR,SAAgBnC,EAAqDX,GACnE,QAAK/O,KAAKa,SAASC,SAAStC,eAAeI,OAG3CoB,KAAKuT,gBAAgB7D,GACrBA,EAAoBhJ,MAAM5E,EAAIiN,EAAarI,MAAM5E,EAAI4N,EAAoBhJ,MAAMnB,KAC3EvF,KAAKkM,KAAKwD,EAAqB1P,KAAK4R,WACtClC,EAAoBhE,UACpB1L,KAAKwT,YAAY9D,IACV,IAEP1P,KAAKyS,qBAAqB/C,IAErB,KAGD4B,EAAApP,UAAAqR,gBAAR,SAAwBxE,OAClBtI,EAAIzG,KAAKwR,gBAAgBhQ,QAAQuN,IAC1B,IAAPtI,IACFA,EAAIzG,KAAKwR,gBAAgBtF,KAAK6C,GAAgB,EAC9C/O,KAAKyR,oBAAoBhL,GAAK,IAEhCzG,KAAKyR,oBAAoBhL,GAAGyF,KAAK,CAACpK,EAAGiN,EAAarI,MAAM5E,EAAGD,EAAGkN,EAAarI,MAAM7E,KAG3EyP,EAAApP,UAAAuQ,qBAAR,SAA6B1D,OACrBtI,EAAIzG,KAAKwR,gBAAgBhQ,QAAQuN,GACjC0E,EAAezT,KAAKyR,oBAAoBhL,GAAG4M,MAC5CI,IAGL1E,EAAarI,MAAM5E,EAAI2R,EAAa3R,EACpCiN,EAAarI,MAAM7E,EAAI4R,EAAa5R,EACpCkN,EAAarD,UACR1L,KAAKyR,oBAAoBhL,GAAGhG,SAC/BT,KAAKwR,gBAAgBpF,OAAO3F,EAAG,GAC/BzG,KAAKyR,oBAAoBrF,OAAO3F,EAAG,MAI/B6K,EAAApP,UAAAsR,YAAR,SAAoBzE,GAClB,GAAI/O,KAAKuR,YAAY/P,QAAQuN,GAAgB,EAC3C/O,KAAKuR,YAAYrF,KAAK6C,GACtB/O,KAAK0R,gBAAgBxF,KAAK,CAAC,CAACpK,EAAGiN,EAAalL,KAAK/B,GAAK,EAAGD,EAAGkN,EAAalL,KAAKhC,GAAK,GACjF,CAACC,EAAGiN,EAAarI,MAAM5E,EAAGD,EAAGkN,EAAarI,MAAM7E,SAC7C,KACC4E,EAAIzG,KAAKuR,YAAY/P,QAAQuN,GACnC/O,KAAK0R,gBAAgBjL,GAAGyF,KAAK,CAACpK,EAAGiN,EAAarI,MAAM5E,EAAGD,EAAGkN,EAAarI,MAAM7E,MAIzEyP,EAAApP,UAAAwR,iBAAR,SAAyBjN,IACd,EAALA,IACFzG,KAAKuR,YAAYnF,OAAO3F,EAAG,GAC3BzG,KAAK0R,gBAAgBtF,OAAO3F,EAAG,KAI3B6K,EAAApP,UAAAoR,qBAAR,SAA6BvE,OACrBtI,EAAIzG,KAAKuR,YAAY/P,QAAQuN,IAC1B,EAALtI,IACFzG,KAAK0R,gBAAgBjL,GAAG4M,MACnBrT,KAAK0R,gBAAgBjR,SACxBT,KAAKuR,YAAYnF,OAAO3F,EAAG,GAC3BzG,KAAK0R,gBAAgBtF,OAAO3F,EAAG,MAK7B6K,EAAApP,UAAA6Q,gBAAR,SAAwBJ,EAA4ClM,GAKlE,QAFIkN,EAAc7R,EAAGD,EAFf+R,EAAO5T,KAAK0R,gBAAgBjL,GAC9B2M,EAAIQ,EAAKnT,OAAS,EAElBqS,GAAS,GACD,EAALM,EAAQA,IACbO,EAAeC,EAAKR,GACpBtR,EAAI6Q,EAAWjM,MAAM5E,EACrBD,EAAI8Q,EAAWjM,MAAM7E,EACrB8Q,EAAWjM,MAAM5E,EAAI6R,EAAa7R,EAClC6Q,EAAWjM,MAAM7E,EAAI8R,EAAa9R,EAC7B7B,KAAKa,SAAS2L,iBAAiBmG,EAAWjM,QAK7CiM,EAAWjM,MAAM5E,EAAIA,EACrB6Q,EAAWjM,MAAM7E,EAAIA,IALrB8Q,EAAWjH,UACXkI,EAAKxH,OAAOgH,EAAI,EAAGQ,EAAKnT,OAAS2S,EAAI,GACrCN,GAAS,GASb,OAHIc,EAAKnT,OAAS,GAChBT,KAAK0T,iBAAiBjN,GAEjBqM,uBAnTV/Q,EAAAA,sDAHO8M,KAwTRyC,EA1TA,GCSAuC,EAAA,WAuCE,SAAAA,EAAY9E,EAA8ClO,EAA8CyC,GAAAtD,KAAAsD,KAAAA,EAFxGtD,KAAAqM,WAAsD,EAGpDrM,KAAK+O,aAAeA,EACpB/O,KAAKa,SAAWA,EAChBb,KAAKiQ,UAAY,CACf1P,QAAS,EACTG,QAAS,GAEXV,KAAK4T,KAAO,GAqQhB,OAlQEC,EAAA3R,UAAAC,QAAA,WACMnC,KAAKa,SAASyB,cAChBtC,KAAKa,SAASyB,cAAa,UAEtBtC,KAAK+O,oBACL/O,KAAKa,gBACLb,KAAKqM,UACRrM,KAAK8T,YACP9T,KAAK8T,YACL9T,KAAK+T,eAITF,EAAA3R,UAAA8R,UAAA,SAAUnW,GAAV,IAAA4E,EAAAzC,KACE,OAAQnC,EAAEoW,OACR,KAAK,EAEH,MACF,KAAK,EACL,KAAK,EAEH,OAGAjU,KAAKa,SAAS8B,QAAQ3F,WAAagD,KAAKa,SAAS8B,QAAQ3F,UAAUO,OACrEyC,KAAKa,SAAS8B,QAAQ3F,UAAUO,MAAMyC,KAAK+O,aAAalL,KAAM7D,KAAK+O,aAAclR,GAGnFA,EAAEqG,kBACFrG,EAAEoG,iBACFjE,KAAKkU,aAAelU,KAAKmU,SAASnR,KAAKhD,MACvCA,KAAKoU,iBAAmBpU,KAAKqU,SAASrR,KAAKhD,MAE3CA,KAAKsD,KAAKC,kBAAkB,WAC1Bd,EAAK6R,UAAY7R,EAAKsM,aAAanM,SAASC,OAAO,WAAY,YAAaJ,EAAKyR,cACjFzR,EAAK8R,UAAY9R,EAAK5B,SAAS+B,SAASC,OAAOJ,EAAK5B,SAASiC,GAAI,YAAaL,EAAKyR,gBAErFlU,KAAKwU,QAAUxU,KAAK+O,aAAanM,SAASC,OAAO,WAAY,UAAW7C,KAAKoU,kBAC7EpU,KAAKyU,WAAazU,KAAK+O,aAAanM,SAASC,OAAO,WAAY,aAAc7C,KAAKoU,kBACnFpU,KAAK0U,aAAe1U,KAAK+O,aAAanM,SAASC,OAAO,SAAU,OAAQ7C,KAAKoU,kBAC7EpU,KAAK2U,SAAW3U,KAAK+O,aAAanM,SAASC,OAAO,WAAY,WAAY7C,KAAKoU,kBAC/EpU,KAAK4U,YAAc5U,KAAK+O,aAAanM,SAASC,OAAO,WAAY,cAAe7C,KAAKoU,kBACrFpU,KAAK+O,aAAanM,SAASsF,SAASlI,KAAK+O,aAAajM,GAAI,wBAC1D9C,KAAK3E,OAAS2E,KAAKa,SAASC,SAASzF,OACrC2E,KAAKoQ,WAAapQ,KAAKa,SAASiC,GAAGiC,WAAa/E,KAAKa,SAASiC,GAAGsN,WACjEpQ,KAAKqQ,UAAYrQ,KAAKa,SAASiC,GAAGmC,UAAYjF,KAAKa,SAASiC,GAAGuN,UAC/DrQ,KAAKgF,KAAOhF,KAAK+O,aAAa/J,KAAOhF,KAAK3E,OAC1C2E,KAAKkF,IAAMlF,KAAK+O,aAAa7J,IAAMlF,KAAK3E,OACxC2E,KAAK2H,MAAQ3H,KAAK+O,aAAapH,MAC/B3H,KAAK4H,OAAS5H,KAAK+O,aAAanH,OAChC5H,KAAK6U,SAAWhX,EAAE0C,QAAUP,KAAKoQ,WAAapQ,KAAK3E,OAAS2E,KAAKgF,KACjEhF,KAAK8U,QAAUjX,EAAE6C,QAAUV,KAAKqQ,UAAYrQ,KAAK3E,OAAS2E,KAAKkF,IAC/DlF,KAAKa,SAASwB,WAAarC,KAAK+O,aAAarI,MAC7C1G,KAAKa,SAASyB,cAAa,GAC3BtC,KAAKkM,KAAO,IAAIoF,EAAatR,KAAK+O,cAClC/O,KAAK5B,KAAO,IAAI0Q,EAAa9O,KAAK+O,cAClC/O,KAAKa,SAAS4I,gBAAiB,EAC/BzJ,KAAKa,SAAS4K,aACdzL,KAAK4T,KAAK1H,KAAK,CAACpK,EAAG9B,KAAK+O,aAAalL,KAAK/B,GAAK,EAAGD,EAAG7B,KAAK+O,aAAalL,KAAKhC,GAAK,KAGnFgS,EAAA3R,UAAAiS,SAAA,SAAStW,GACPA,EAAEqG,kBACFrG,EAAEoG,iBACF7E,EAAckB,gBAAgBzC,GAC9BmC,KAAKoQ,WAAapQ,KAAKa,SAASiC,GAAGiC,WAAa/E,KAAKa,SAASiC,GAAGsN,WACjEpQ,KAAKqQ,UAAYrQ,KAAKa,SAASiC,GAAGmC,UAAYjF,KAAKa,SAASiC,GAAGuN,UAC/DL,EAAOhQ,KAAKa,SAAUb,KAAKgF,KAAMhF,KAAKkF,IAAKlF,KAAK2H,MAAO3H,KAAK4H,OAAQ/J,EAAGmC,KAAKiQ,UAC1EjQ,KAAK+U,uCAAuC/R,KAAKhD,OAEnDA,KAAK+U,uCAAuClX,IAG9CgW,EAAA3R,UAAA6S,uCAAA,SAAuClX,GAAvC,IAAA4E,EAAAzC,KACEA,KAAKgF,KAAOnH,EAAE0C,QAAUP,KAAKoQ,WAAapQ,KAAK6U,SAC/C7U,KAAKkF,IAAMrH,EAAE6C,QAAUV,KAAKqQ,UAAYrQ,KAAK8U,QAC7C9U,KAAKkQ,wBACLlQ,KAAKiQ,UAAU1P,QAAU1C,EAAE0C,QAC3BP,KAAKiQ,UAAUvP,QAAU7C,EAAE6C,QAC3BV,KAAKsD,KAAK0R,IAAI,WACZvS,EAAK5B,SAAS4K,gBAIlBoI,EAAA3R,UAAAmS,SAAA,SAASxW,GAAT,IAAA4E,EAAAzC,KACEnC,EAAEqG,kBACFrG,EAAEoG,iBAEFmN,IACApR,KAAK0U,eACL1U,KAAKsU,YACLtU,KAAKwU,UACLxU,KAAKyU,aACLzU,KAAKuU,YACLvU,KAAK2U,WACL3U,KAAK4U,cACL5U,KAAK+O,aAAanM,SAAS0F,YAAYtI,KAAK+O,aAAajM,GAAI,wBAC7D9C,KAAKa,SAAS4I,gBAAiB,EAC/BzJ,KAAKa,SAAS4K,aACdzL,KAAK4T,KAAO,GACR5T,KAAKa,SAAS8B,QAAQ3F,WAAagD,KAAKa,SAAS8B,QAAQ3F,UAAUM,KACrE2X,QAAQC,QAAQlV,KAAKa,SAAS8B,QAAQ3F,UAAUM,KAAK0C,KAAK+O,aAAalL,KAAM7D,KAAK+O,aAAclR,IAC7FsX,KAAKnV,KAAKoV,SAASpS,KAAKhD,MAAOA,KAAKqV,WAAWrS,KAAKhD,OAEvDA,KAAKoV,WAEPhV,WAAW,WACLqC,EAAK5B,WACP4B,EAAK5B,SAASwB,WAAa,KAC3BI,EAAK5B,SAASyB,cAAa,OAKjCuR,EAAA3R,UAAAmT,WAAA,WACErV,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAK+O,aAAalL,KAAK/B,GAAK,EACxD9B,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAK+O,aAAalL,KAAKhC,GAAK,EACxD7B,KAAK+O,aAAarD,UACd1L,KAAKkM,MACPlM,KAAKkM,KAAKwG,eAER1S,KAAK5B,MACP4B,KAAK5B,KAAKgR,kBAERpP,KAAKkM,OACPlM,KAAKkM,KAAK/J,iBACHnC,KAAKkM,MAEVlM,KAAK5B,OACP4B,KAAK5B,KAAK+D,iBACHnC,KAAK5B,OAIhByV,EAAA3R,UAAAkT,SAAA,WACMpV,KAAKa,SAASC,SAAS9D,UAAUQ,eAAiBwC,KAAKa,SAAS8B,QAAQ3F,WACvEgD,KAAKa,SAAS8B,QAAQ3F,UAAUS,uBAChCuC,KAAKqM,YAAgC,IAAnBrM,KAAKqM,WAAsBrM,KAAKqM,UAAU3F,OAC/D1G,KAAKa,SAAS8B,QAAQ3F,UAAUS,sBAAsBuC,KAAK+O,aAAalL,KAAM7D,KAAKqM,UAAUxI,KAAM7D,KAAKa,UAE1Gb,KAAKqM,WAAY,EACjBrM,KAAK+O,aAAarD,UAClB1L,KAAK+O,aAAaO,iBAAiBtP,KAAK+O,aAAarI,MAAO1G,KAAK+O,aAAalL,MAC1E7D,KAAKkM,MACPlM,KAAKkM,KAAK0G,iBAER5S,KAAK5B,MACP4B,KAAK5B,KAAKiR,cAERrP,KAAKkM,OACPlM,KAAKkM,KAAK/J,iBACHnC,KAAKkM,MAEVlM,KAAK5B,OACP4B,KAAK5B,KAAK+D,iBACHnC,KAAK5B,OAIhByV,EAAA3R,UAAAgO,sBAAA,WAgBE,GAfAlQ,KAAKa,SAASwB,WAAarC,KAAK+O,aAAarI,MAC7C1G,KAAKsV,UAAYtV,KAAKa,SAASsE,kBAAkBnF,KAAKgF,KAAMI,KAAKoC,OACjExH,KAAKuV,UAAYvV,KAAKa,SAASyE,kBAAkBtF,KAAKkF,IAAKE,KAAKoC,OAChExH,KAAKwV,gBAAkBxV,KAAK+O,aAAarI,MAAM5E,EAC/C9B,KAAKyV,gBAAkBzV,KAAK+O,aAAarI,MAAM7E,EAC/C7B,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAKsV,UAC7BtV,KAAKa,SAASyL,mBAAmBtM,KAAK+O,aAAarI,SACrD1G,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAKwV,iBAEnCxV,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAKuV,UAC7BvV,KAAKa,SAASyL,mBAAmBtM,KAAK+O,aAAarI,SACrD1G,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAKyV,iBAEnCzV,KAAKa,SAAS+I,aAAa/B,gBAAgB7H,KAAK+O,aAAanM,SAAU5C,KAAK+O,aAAajM,GAAI9C,KAAKgF,KAAMhF,KAAKkF,KAEzGlF,KAAKwV,kBAAoBxV,KAAK+O,aAAarI,MAAM5E,GAAK9B,KAAKyV,kBAAoBzV,KAAK+O,aAAarI,MAAM7E,EAAG,KACtG8R,EAAe3T,KAAK4T,KAAK5T,KAAK4T,KAAKnT,OAAS,GAC9C2R,EAAY,GACZuB,EAAa7R,EAAI9B,KAAK+O,aAAarI,MAAM5E,EAC3CsQ,EAAYpS,KAAKkM,KAAK+F,SACb0B,EAAa7R,EAAI9B,KAAK+O,aAAarI,MAAM5E,EAClDsQ,EAAYpS,KAAKkM,KAAK0F,SACb+B,EAAa9R,EAAI7B,KAAK+O,aAAarI,MAAM7E,EAClDuQ,EAAYpS,KAAKkM,KAAKgG,UACbyB,EAAa9R,EAAI7B,KAAK+O,aAAarI,MAAM7E,IAClDuQ,EAAYpS,KAAKkM,KAAKiG,WAExBnS,KAAKkM,KAAK7N,UAAU+T,EAAWpS,KAAKa,SAASC,SAASxC,mBACtD0B,KAAK5B,KAAK6Q,YACVjP,KAAKqM,UAAYrM,KAAKa,SAAS8E,eAAe3F,KAAK+O,aAAarI,OAC5D1G,KAAKqM,WACPrM,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAKwV,gBACjCxV,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAKyV,gBAC7BzV,KAAKa,SAASC,SAAS9D,UAAUQ,gBAAoC,IAAnBwC,KAAKqM,WAAsBrM,KAAKqM,UAAU3F,QAC9F1G,KAAKa,SAASwB,WAAa,OAG7BrC,KAAK4T,KAAK1H,KAAK,CAACpK,EAAG9B,KAAK+O,aAAarI,MAAM5E,EAAGD,EAAG7B,KAAK+O,aAAarI,MAAM7E,IAE3E7B,KAAKkM,KAAK2G,gBAEZ7S,KAAKa,SAASyB,cAAa,IAG7BuR,EAAA3R,UAAA0J,OAAA,eACQ8J,EAAa1V,KAAK+O,aAAaU,gBAChCzP,KAAK9C,SAAWwY,GACnB1V,KAAK9C,SAAW8C,KAAK9C,QACrB8C,KAAK2V,kBAAoB3V,KAAK4V,eAAe5S,KAAKhD,MAClDA,KAAK8T,UAAY9T,KAAK+O,aAAanM,SAASC,OAAO7C,KAAK+O,aAAajM,GAAI,YAAa9C,KAAK2V,mBAC3F3V,KAAK+T,WAAa/T,KAAK+O,aAAanM,SAASC,OAAO7C,KAAK+O,aAAajM,GAAI,aAAc9C,KAAK2V,oBACpF3V,KAAK9C,UAAYwY,IAC1B1V,KAAK9C,SAAW8C,KAAK9C,QACrB8C,KAAK8T,YACL9T,KAAK+T,eAITF,EAAA3R,UAAA0T,eAAA,SAAe/X,GAAf,IAAA4E,EAAAzC,KACE,KAAInC,EAAEmD,OAAOK,aAAa,WAAoG,EAAxFxD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,oCAGpFpC,EAAcwB,0BAA0BZ,KAAKa,SAAUhD,IAI3D,GADAuB,EAAckB,gBAAgBzC,GACzBmC,KAAKa,SAASC,SAAS9D,UAAUC,eAIhC6C,EAAUM,WAAW,WACzBqC,EAAKuR,UAAUnW,GACfwX,KACCrV,KAAKa,SAASC,SAAS9D,UAAUC,YAC9B4Y,EAAc7V,KAAK+O,aAAanM,SAASC,OAAO,WAAY,UAAWwS,GACvES,EAAmB9V,KAAK+O,aAAanM,SAASC,OAAO,WAAY,aAAcwS,GAC/EX,EAAe1U,KAAK+O,aAAanM,SAASC,OAAO,SAAU,OAAQwS,GACnEU,EAAkB/V,KAAK+O,aAAanM,SAASC,OAAO,WAAY,YAItE,SAASmT,EAAWC,GAClB7W,EAAckB,gBAAgB2V,IACgB,EAA1C7Q,KAAKM,IAAIuQ,EAAU1V,QAAU1C,EAAE0C,UAA0D,EAA1C6E,KAAKM,IAAIuQ,EAAUvV,QAAU7C,EAAE6C,WAChF2U,MANEa,EAAiBlW,KAAK+O,aAAanM,SAASC,OAAO,WAAY,WAAYwS,GAC3Ec,EAAoBnW,KAAK+O,aAAanM,SAASC,OAAO,WAAY,cAAewS,QAZrFrV,KAAKgU,UAAUnW,GAqBjB,SAASwX,IACPlV,aAAaL,GACb4U,IACAmB,IACAC,IACAC,IACAG,IACAC,0BAhTLpU,EAAAA,sDAHO8M,SACA7M,SAPY2M,EAAAA,UA4TpBkF,EAnTA,GCTAuC,EAAA,WAyBE,SAAAA,EAAYrH,GACV/O,KAAKuR,YAAc,GACnBvR,KAAK0R,gBAAkB,GACvB1R,KAAK+O,aAAeA,EACpB/O,KAAKa,SAAWkO,EAAalO,SAC7Bb,KAAK2R,WAAa,CAChBC,SAAU5R,KAAK6R,QACfI,SAAUjS,KAAKgS,QACfE,UAAWlS,KAAK8R,SAChBK,UAAWnS,KAAK+R,UAElB/R,KAAKmS,UAAY,YACjBnS,KAAKkS,UAAY,YACjBlS,KAAK4R,SAAW,WAChB5R,KAAKiS,SAAW,WA6MpB,OA1MEmE,EAAAlU,UAAAC,QAAA,kBACSnC,KAAKa,gBACLb,KAAK+O,cAGdqH,EAAAlU,UAAA7D,UAAA,SAAU+T,GACR,QAAIpS,KAAKa,SAASC,SAASjC,iBAClBmB,KAAKkM,KAAKlM,KAAK+O,aAAcqD,IAMxCgE,EAAAlU,UAAAwQ,aAAA,WAIE,QADIC,EAFAlM,EAAI,EACFF,EAAYvG,KAAKuR,YAAY9Q,OAE5BgG,EAAIF,EAAGE,KACZkM,EAAa3S,KAAKuR,YAAY9K,IACnBC,MAAM5E,EAAI6Q,EAAW9O,KAAK/B,GAAK,EAC1C6Q,EAAWjM,MAAM7E,EAAI8Q,EAAW9O,KAAKhC,GAAK,EAC1C8Q,EAAWjM,MAAMnB,KAAOoN,EAAW9O,KAAK0B,MAAQ,EAChDoN,EAAWjM,MAAM2P,IAAM1D,EAAW9O,KAAKwS,KAAO,EAC9C1D,EAAWjH,UAEb1L,KAAKuR,YAAc,GACnBvR,KAAK0R,gBAAkB,IAGzB0E,EAAAlU,UAAA0Q,eAAA,WAIE,QADID,EAFAlM,EAAI,EACFF,EAAYvG,KAAKuR,YAAY9Q,OAE5BgG,EAAIF,EAAGE,KACZkM,EAAa3S,KAAKuR,YAAY9K,IACnB6I,iBAAiBqD,EAAWjM,MAAOiM,EAAW9O,MAE3D7D,KAAKuR,YAAc,GACnBvR,KAAK0R,gBAAkB,IAGzB0E,EAAAlU,UAAA2Q,cAAA,WAGE,QAFIpM,EAAYzG,KAAKuR,YAAY9Q,OAAS,EACtCqS,GAAS,GACD,EAALrM,EAAQA,IACTzG,KAAK+S,gBAAgB/S,KAAKuR,YAAY9K,GAAIA,KAC5CqM,GAAS,GAGTA,GACF9S,KAAK6S,iBAIDuD,EAAAlU,UAAAgK,KAAR,SAAa6C,EAA8CqD,OACnD5C,EAA6BxP,KAAKa,SAAS8E,eAAeoJ,EAAarI,OAC7E,GAAI8I,IAAmD,IAA1BA,GAC3BA,IAA0BxP,KAAK+O,cAAgBS,EAAsB8G,gBACrE,GAAItW,KAAK2R,WAAWS,GAAWnL,KAAKjH,KAAMwP,EAAuBT,EAAcqD,GAC7E,OAAO,OAEJ,IAA8B,IAA1B5C,EACT,OAAO,EAET,OAAO,GAGD4G,EAAAlU,UAAA4P,SAAR,SAAiBpC,EAAqDX,EACrDqD,OACTmE,EAAU7G,EAAoBhJ,MAAM7E,EACpC2U,EAAa9G,EAAoBhJ,MAAMlB,KAG7C,OAFAkK,EAAoBhJ,MAAM7E,EAAIkN,EAAarI,MAAM7E,EAAIkN,EAAarI,MAAMlB,KACxEkK,EAAoBhJ,MAAMlB,KAAOgR,EAAaD,EAAU7G,EAAoBhJ,MAAM7E,EAC7EoH,EAAkBY,uBAAuB6F,EAAoBhJ,MAAOqI,EAAarI,QAChF1G,KAAKa,SAASyL,mBAAmBoD,EAAoBhJ,QAMzDgJ,EAAoBhJ,MAAM7E,EAAI0U,EAC9B7G,EAAoBhJ,MAAMlB,KAAOgR,GAE5B,IARL9G,EAAoBhE,UACpB1L,KAAKwT,YAAY9D,GACjB1P,KAAKkM,KAAK6C,EAAcqD,IACjB,IAQHgE,EAAAlU,UAAA6P,SAAR,SAAiBrC,EAAqDX,EACrDqD,OACToE,EAAa9G,EAAoBhJ,MAAMlB,KAE7C,OADAkK,EAAoBhJ,MAAMlB,KAAOuJ,EAAarI,MAAM7E,EAAI6N,EAAoBhJ,MAAM7E,EAC7EoH,EAAkBY,uBAAuB6F,EAAoBhJ,MAAOqI,EAAarI,QAChF1G,KAAKa,SAASyL,mBAAmBoD,EAAoBhJ,QAMzDgJ,EAAoBhJ,MAAMlB,KAAOgR,GAE5B,IAPL9G,EAAoBhE,UACpB1L,KAAKwT,YAAY9D,GACjB1P,KAAKkM,KAAK6C,EAAcqD,IACjB,IAOHgE,EAAAlU,UAAA8P,QAAR,SAAgBtC,EAAqDX,EACrDqD,OACRqE,EAAU/G,EAAoBhJ,MAAM5E,EACpC4U,EAAahH,EAAoBhJ,MAAMnB,KAG7C,OAFAmK,EAAoBhJ,MAAM5E,EAAIiN,EAAarI,MAAM5E,EAAIiN,EAAarI,MAAMnB,KACxEmK,EAAoBhJ,MAAMnB,KAAOmR,EAAaD,EAAU/G,EAAoBhJ,MAAM5E,EAC7EmH,EAAkBY,uBAAuB6F,EAAoBhJ,MAAOqI,EAAarI,QAChF1G,KAAKa,SAASyL,mBAAmBoD,EAAoBhJ,QAMzDgJ,EAAoBhJ,MAAM5E,EAAI2U,EAC9B/G,EAAoBhJ,MAAMnB,KAAOmR,GAE5B,IARLhH,EAAoBhE,UACpB1L,KAAKwT,YAAY9D,GACjB1P,KAAKkM,KAAK6C,EAAcqD,IACjB,IAQHgE,EAAAlU,UAAA2P,QAAR,SAAgBnC,EAAqDX,EACrDqD,OACRsE,EAAahH,EAAoBhJ,MAAMnB,KAE7C,OADAmK,EAAoBhJ,MAAMnB,KAAOwJ,EAAarI,MAAM5E,EAAI4N,EAAoBhJ,MAAM5E,EAC7EmH,EAAkBY,uBAAuB6F,EAAoBhJ,MAAOqI,EAAarI,QAChF1G,KAAKa,SAASyL,mBAAmBoD,EAAoBhJ,QAMzDgJ,EAAoBhJ,MAAMnB,KAAOmR,GAE5B,IAPLhH,EAAoBhE,UACpB1L,KAAKwT,YAAY9D,GACjB1P,KAAKkM,KAAK6C,EAAcqD,IACjB,IAOHgE,EAAAlU,UAAAsR,YAAR,SAAoBzE,GAClB,GAAI/O,KAAKuR,YAAY/P,QAAQuN,GAAgB,EAC3C/O,KAAKuR,YAAYrF,KAAK6C,GACtB/O,KAAK0R,gBAAgBxF,KAAK,CACxB,CACEpK,EAAGiN,EAAalL,KAAK/B,GAAK,EAC1BD,EAAGkN,EAAalL,KAAKhC,GAAK,EAC1B0D,KAAMwJ,EAAalL,KAAK0B,MAAQ,EAChCC,KAAMuJ,EAAalL,KAAK2B,MAAQ,GAElC,CACE1D,EAAGiN,EAAarI,MAAM5E,EACtBD,EAAGkN,EAAarI,MAAM7E,EACtB0D,KAAMwJ,EAAarI,MAAMnB,KACzBC,KAAMuJ,EAAarI,MAAMlB,YAExB,KACCiB,EAAIzG,KAAKuR,YAAY/P,QAAQuN,GACnC/O,KAAK0R,gBAAgBjL,GAAGyF,KACtB,CACEpK,EAAGiN,EAAarI,MAAM5E,EACtBD,EAAGkN,EAAarI,MAAM7E,EACtB0D,KAAMwJ,EAAarI,MAAMnB,KACzBC,KAAMuJ,EAAarI,MAAMlB,SAKzB4Q,EAAAlU,UAAAwR,iBAAR,SAAyBjN,IACd,EAALA,IACFzG,KAAKuR,YAAYnF,OAAO3F,EAAG,GAC3BzG,KAAK0R,gBAAgBtF,OAAO3F,EAAG,KAI3B2P,EAAAlU,UAAA6Q,gBAAR,SAAwBJ,EAA4ClM,GAIlE,QADIkN,EAAoE7R,EAAGD,EAAG0D,EAAMC,EAF9EoO,EAAO5T,KAAK0R,gBAAgBjL,GAC9B2M,EAAIQ,EAAKnT,OAAS,GAEV,EAAL2S,EAAQA,IACbO,EAAeC,EAAKR,GACpBtR,EAAI6Q,EAAWjM,MAAM5E,EACrBD,EAAI8Q,EAAWjM,MAAM7E,EACrB0D,EAAOoN,EAAWjM,MAAMnB,KACxBC,EAAOmN,EAAWjM,MAAMlB,KACxBmN,EAAWjM,MAAM5E,EAAI6R,EAAa7R,EAClC6Q,EAAWjM,MAAM7E,EAAI8R,EAAa9R,EAClC8Q,EAAWjM,MAAMnB,KAAOoO,EAAapO,KACrCoN,EAAWjM,MAAMlB,KAAOmO,EAAanO,KAChCxF,KAAKa,SAAS2L,iBAAiBmG,EAAWjM,QAI7CiM,EAAWjM,MAAM5E,EAAIA,EACrB6Q,EAAWjM,MAAM7E,EAAIA,EACrB8Q,EAAWjM,MAAMnB,KAAOA,EACxBoN,EAAWjM,MAAMlB,KAAOA,IANxBmN,EAAWjH,UACXkI,EAAKxH,OAAOgH,EAAI,EAAGQ,EAAKnT,OAAS,EAAI2S,IAQzC,OAAIQ,EAAKnT,OAAS,IAChBT,KAAK0T,iBAAiBjN,IACf,wBAzOZ1E,EAAAA,sDAJO8M,KAiPRuH,EApPA,GCUAO,EAAA,WAwCE,SAAAA,EAAY5H,EAA8ClO,EAA8CyC,GAAAtD,KAAAsD,KAAAA,EACtGtD,KAAK+O,aAAeA,EACpB/O,KAAKa,SAAWA,EAChBb,KAAKiQ,UAAY,CACf1P,QAAS,EACTG,QAAS,GAEXV,KAAK4W,WAAa,CAAC,EAAG,EAAG,EAAG,GAC5B5W,KAAKmQ,sBAAwB,CAACpS,GAAG,EAAOF,GAAG,EAAOC,GAAG,EAAOF,GAAG,GAgWnE,OA7VE+Y,EAAAzU,UAAAC,QAAA,WACMnC,KAAKa,SAASyB,cAChBtC,KAAKa,SAASyB,sBAETtC,KAAK+O,oBACL/O,KAAKa,UAGd8V,EAAAzU,UAAA8R,UAAA,SAAUnW,GAAV,IAAA4E,EAAAzC,KACE,OAAQnC,EAAEoW,OACR,KAAK,EAEH,MACF,KAAK,EACL,KAAK,EAEH,OAEAjU,KAAKa,SAAS8B,QAAQjF,WAAasC,KAAKa,SAAS8B,QAAQjF,UAAUH,OACrEyC,KAAKa,SAAS8B,QAAQjF,UAAUH,MAAMyC,KAAK+O,aAAalL,KAAM7D,KAAK+O,aAAclR,GAEnFA,EAAEqG,kBACFrG,EAAEoG,iBACFjE,KAAKkU,aAAelU,KAAKmU,SAASnR,KAAKhD,MACvCA,KAAKoU,iBAAmBpU,KAAKqU,SAASrR,KAAKhD,MAC3CA,KAAKsD,KAAKC,kBAAkB,WAC1Bd,EAAK6R,UAAY7R,EAAKsM,aAAanM,SAASC,OAAO,WAAY,YAAaJ,EAAKyR,cACjFzR,EAAK8R,UAAY9R,EAAK5B,SAAS+B,SAASC,OAAOJ,EAAK5B,SAASiC,GAAI,YAAaL,EAAKyR,gBAErFlU,KAAKwU,QAAUxU,KAAK+O,aAAanM,SAASC,OAAO,WAAY,UAAW7C,KAAKoU,kBAC7EpU,KAAKyU,WAAazU,KAAK+O,aAAanM,SAASC,OAAO,WAAY,aAAc7C,KAAKoU,kBACnFpU,KAAK0U,aAAe1U,KAAK+O,aAAanM,SAASC,OAAO,SAAU,OAAQ7C,KAAKoU,kBAC7EpU,KAAK2U,SAAW3U,KAAK+O,aAAanM,SAASC,OAAO,WAAY,WAAY7C,KAAKoU,kBAC/EpU,KAAK4U,YAAc5U,KAAK+O,aAAanM,SAASC,OAAO,WAAY,cAAe7C,KAAKoU,kBAErFpU,KAAK+O,aAAanM,SAASsF,SAASlI,KAAK+O,aAAajM,GAAI,0BAC1D9C,KAAKiQ,UAAU1P,QAAU1C,EAAE0C,QAC3BP,KAAKiQ,UAAUvP,QAAU7C,EAAE6C,QAC3BV,KAAKgF,KAAOhF,KAAK+O,aAAa/J,KAC9BhF,KAAKkF,IAAMlF,KAAK+O,aAAa7J,IAC7BlF,KAAK2H,MAAQ3H,KAAK+O,aAAapH,MAC/B3H,KAAK4H,OAAS5H,KAAK+O,aAAanH,OAChC5H,KAAK6W,OAAS7W,KAAK+O,aAAa7J,IAAMlF,KAAK+O,aAAanH,OACxD5H,KAAK8W,MAAQ9W,KAAK+O,aAAa/J,KAAOhF,KAAK+O,aAAapH,MACxD3H,KAAK3E,OAAS2E,KAAKa,SAASC,SAASzF,OACrC2E,KAAKoQ,WAAapQ,KAAKa,SAASiC,GAAGiC,WAAa/E,KAAKa,SAASiC,GAAGsN,WACjEpQ,KAAKqQ,UAAYrQ,KAAKa,SAASiC,GAAGmC,UAAYjF,KAAKa,SAASiC,GAAGuN,UAC/DrQ,KAAK6U,SAAWhX,EAAE0C,QAAUP,KAAKoQ,WAAapQ,KAAKgF,KACnDhF,KAAK+W,UAAYlZ,EAAE0C,QAAUP,KAAKoQ,WAAapQ,KAAK8W,MACpD9W,KAAK8U,QAAUjX,EAAE6C,QAAUV,KAAKqQ,UAAYrQ,KAAKkF,IACjDlF,KAAKgX,WAAanZ,EAAE6C,QAAUV,KAAKqQ,UAAYrQ,KAAK6W,OACpD7W,KAAKiX,UAAYjX,KAAKa,SAASqN,kBAAkBlO,KAAK+O,aAAarI,MAAMxL,aAAe8E,KAAKa,SAASC,SAAS5F,aAC3G8E,KAAK3E,OACT2E,KAAKkX,SAAWlX,KAAKa,SAASoN,kBAAkBjO,KAAK+O,aAAarI,MAAMzL,aAAe+E,KAAKa,SAASC,SAAS7F,aAC1G+E,KAAK3E,OACT2E,KAAKa,SAASwB,WAAarC,KAAK+O,aAAarI,MAC7C1G,KAAKa,SAASyB,eACdtC,KAAKkM,KAAO,IAAIoF,EAAatR,KAAK+O,cAClC/O,KAAKmX,WAAa,IAAIf,EAAmBpW,KAAK+O,cAC9C/O,KAAKa,SAAS4I,gBAAiB,EAC/BzJ,KAAKa,SAAS4K,aAEV5N,EAAEmD,OAAOK,aAAa,WAA6E,EAAjExD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,aACtFxB,KAAKmQ,sBAAsBrS,GAAI,EAC/BkC,KAAKoX,kBAAoBpX,KAAKqX,SACrBxZ,EAAEmD,OAAOK,aAAa,WAA6E,EAAjExD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,aAC7FxB,KAAKmQ,sBAAsBpS,GAAI,EAC/BiC,KAAKoX,kBAAoBpX,KAAKsX,SACrBzZ,EAAEmD,OAAOK,aAAa,WAA6E,EAAjExD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,aAC7FxB,KAAKmQ,sBAAsBvS,GAAI,EAC/BoC,KAAKoX,kBAAoBpX,KAAKuX,SACrB1Z,EAAEmD,OAAOK,aAAa,WAA6E,EAAjExD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,aAC7FxB,KAAKmQ,sBAAsBtS,GAAI,EAC/BmC,KAAKoX,kBAAoBpX,KAAKwX,SACrB3Z,EAAEmD,OAAOK,aAAa,WAA8E,EAAlExD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,cAC7FxB,KAAKmQ,sBAAsBrS,GAAI,EAC/BkC,KAAKmQ,sBAAsBpS,GAAI,EAC/BiC,KAAKoX,kBAAoBpX,KAAKyX,UACrB5Z,EAAEmD,OAAOK,aAAa,WAA8E,EAAlExD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,cAC7FxB,KAAKmQ,sBAAsBrS,GAAI,EAC/BkC,KAAKmQ,sBAAsBtS,GAAI,EAC/BmC,KAAKoX,kBAAoBpX,KAAK0X,UACrB7Z,EAAEmD,OAAOK,aAAa,WAA8E,EAAlExD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,cAC7FxB,KAAKmQ,sBAAsBvS,GAAI,EAC/BoC,KAAKmQ,sBAAsBpS,GAAI,EAC/BiC,KAAKoX,kBAAoBpX,KAAK2X,UACrB9Z,EAAEmD,OAAOK,aAAa,WAA8E,EAAlExD,EAAEmD,OAAOM,aAAa,SAASC,MAAM,KAAKC,QAAQ,eAC7FxB,KAAKmQ,sBAAsBvS,GAAI,EAC/BoC,KAAKmQ,sBAAsBtS,GAAI,EAC/BmC,KAAKoX,kBAAoBpX,KAAK4X,WAIlCjB,EAAAzU,UAAAiS,SAAA,SAAStW,GAAT,IAAA4E,EAAAzC,KACEnC,EAAEqG,kBACFrG,EAAEoG,iBACF7E,EAAckB,gBAAgBzC,GAC9BmC,KAAKqQ,UAAYrQ,KAAKa,SAASiC,GAAGmC,UAAYjF,KAAKa,SAASiC,GAAGuN,UAC/DrQ,KAAKoQ,WAAapQ,KAAKa,SAASiC,GAAGiC,WAAa/E,KAAKa,SAASiC,GAAGsN,WACjEJ,EAAOhQ,KAAKa,SAAUb,KAAKgF,KAAMhF,KAAKkF,IAAKlF,KAAK2H,MAAO3H,KAAK4H,OAAQ/J,EAAGmC,KAAKiQ,UAAWjQ,KAAKoX,kBAAkBpU,KAAKhD,OAAO,EACxHA,KAAKmQ,uBACPnQ,KAAKoX,kBAAkBvZ,GAEvBmC,KAAKiQ,UAAU1P,QAAU1C,EAAE0C,QAC3BP,KAAKiQ,UAAUvP,QAAU7C,EAAE6C,QAC3BV,KAAKsD,KAAK0R,IAAI,WACZvS,EAAK5B,SAAS4K,gBAIlBkL,EAAAzU,UAAAmS,SAAA,SAASxW,GAAT,IAAA4E,EAAAzC,KACEnC,EAAEqG,kBACFrG,EAAEoG,iBACFmN,IACApR,KAAKsU,YACLtU,KAAKwU,UACLxU,KAAKyU,aACLzU,KAAK0U,eACL1U,KAAKuU,YACLvU,KAAK2U,WACL3U,KAAK4U,cACL5U,KAAKa,SAAS4I,gBAAiB,EAC/BzJ,KAAKa,SAAS4K,aACVzL,KAAKa,SAAS8B,QAAQjF,WAAasC,KAAKa,SAAS8B,QAAQjF,UAAUJ,KACrE2X,QAAQC,QAAQlV,KAAKa,SAAS8B,QAAQjF,UAAUJ,KAAK0C,KAAK+O,aAAalL,KAAM7D,KAAK+O,aAAclR,IAC7FsX,KAAKnV,KAAK6X,WAAW7U,KAAKhD,MAAOA,KAAK8X,aAAa9U,KAAKhD,OAE3DA,KAAK6X,aAEPzX,WAAW,WACTqC,EAAKsM,aAAanM,SAAS0F,YAAY7F,EAAKsM,aAAajM,GAAI,0BACzDL,EAAK5B,WACP4B,EAAK5B,SAASwB,WAAa,KAC3BI,EAAK5B,SAASyB,mBAKpBqU,EAAAzU,UAAA4V,aAAA,WACE9X,KAAK+O,aAAarI,MAAMnB,KAAOvF,KAAK+O,aAAalL,KAAK0B,MAAQ,EAC9DvF,KAAK+O,aAAarI,MAAMlB,KAAOxF,KAAK+O,aAAalL,KAAK2B,MAAQ,EAC9DxF,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAK+O,aAAalL,KAAK/B,GAAK,EACxD9B,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAK+O,aAAalL,KAAKhC,GAAK,EACxD7B,KAAK+O,aAAarD,UAClB1L,KAAKkM,KAAKwG,eACV1S,KAAKmX,WAAWzE,eAChB1S,KAAKkM,KAAK/J,iBACHnC,KAAKkM,KACZlM,KAAKmX,WAAWhV,iBACTnC,KAAKmX,YAGdR,EAAAzU,UAAA2V,WAAA,WACE7X,KAAK+O,aAAarD,UAClB1L,KAAK+O,aAAaO,iBAAiBtP,KAAK+O,aAAarI,MAAO1G,KAAK+O,aAAalL,MAC9E7D,KAAKkM,KAAK0G,iBACV5S,KAAKmX,WAAWvE,iBAChB5S,KAAKkM,KAAK/J,iBACHnC,KAAKkM,KACZlM,KAAKmX,WAAWhV,iBACTnC,KAAKmX,YAGdR,EAAAzU,UAAAmV,QAAA,SAAQxZ,GAQN,GAPAmC,KAAKkF,IAAMrH,EAAE6C,QAAUV,KAAKqQ,UAAYrQ,KAAK8U,QAC7C9U,KAAK4H,OAAS5H,KAAK6W,OAAS7W,KAAKkF,IAC7BlF,KAAKiX,UAAYjX,KAAK4H,SACxB5H,KAAK4H,OAAS5H,KAAKiX,UACnBjX,KAAKkF,IAAMlF,KAAK6W,OAAS7W,KAAKiX,WAEhCjX,KAAK+X,YAAc/X,KAAKa,SAASyE,kBAAkBtF,KAAKkF,IAAMlF,KAAK3E,OAAQ+J,KAAKC,OAC5ErF,KAAK+O,aAAarI,MAAM7E,IAAM7B,KAAK+X,YAAa,CAOlD,GANA/X,KAAK4W,WAAW,GAAK5W,KAAK+O,aAAarI,MAAM7E,EAC7C7B,KAAK4W,WAAW,GAAK5W,KAAK+O,aAAarI,MAAMlB,KAC7CxF,KAAK+O,aAAarI,MAAMlB,MAAQxF,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAK+X,YACjE/X,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAK+X,YACjC/X,KAAKmX,WAAW9Y,UAAU2B,KAAKmX,WAAWhF,WAC1CnS,KAAKkM,KAAK7N,UAAU2B,KAAKkM,KAAKiG,UAAWnS,KAAKa,SAASC,SAASvC,qBAC5DyB,KAAKa,SAAS8E,eAAe3F,KAAK+O,aAAarI,OAKjD,OAJA1G,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAK4W,WAAW,GAC5C5W,KAAK+O,aAAarI,MAAMlB,KAAOxF,KAAK4W,WAAW,GAC/C5W,KAAKgY,WAAWhY,KAAKa,SAASqN,kBAAkBlO,KAAK+O,aAAarI,MAAM7E,SACxE7B,KAAKiY,cAAcjY,KAAKa,SAASqN,kBAAkBlO,KAAK+O,aAAarI,MAAMlB,MAAQxF,KAAK3E,QAGxF2E,KAAKa,SAASyB,eAEhBtC,KAAKmX,WAAWtE,gBAChB7S,KAAKkM,KAAK2G,gBAEZ7S,KAAKgY,WAAWhY,KAAKkF,KACrBlF,KAAKiY,cAAcjY,KAAK4H,SAG1B+O,EAAAzU,UAAAoV,QAAA,SAAQzZ,GAQN,GAPAmC,KAAKgF,KAAOnH,EAAE0C,QAAUP,KAAKoQ,WAAapQ,KAAK6U,SAC/C7U,KAAK2H,MAAQ3H,KAAK8W,MAAQ9W,KAAKgF,KAC3BhF,KAAKkX,SAAWlX,KAAK2H,QACvB3H,KAAK2H,MAAQ3H,KAAKkX,SAClBlX,KAAKgF,KAAOhF,KAAK8W,MAAQ9W,KAAKkX,UAEhClX,KAAK+X,YAAc/X,KAAKa,SAASsE,kBAAkBnF,KAAKgF,KAAOhF,KAAK3E,OAAQ+J,KAAKC,OAC7ErF,KAAK+O,aAAarI,MAAM5E,IAAM9B,KAAK+X,YAAa,CAOlD,GANA/X,KAAK4W,WAAW,GAAK5W,KAAK+O,aAAarI,MAAM5E,EAC7C9B,KAAK4W,WAAW,GAAK5W,KAAK+O,aAAarI,MAAMnB,KAC7CvF,KAAK+O,aAAarI,MAAMnB,MAAQvF,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAK+X,YACjE/X,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAK+X,YACjC/X,KAAKmX,WAAW9Y,UAAU2B,KAAKmX,WAAWvF,UAC1C5R,KAAKkM,KAAK7N,UAAU2B,KAAKkM,KAAK0F,SAAU5R,KAAKa,SAASC,SAASvC,qBAC3DyB,KAAKa,SAAS8E,eAAe3F,KAAK+O,aAAarI,OAKjD,OAJA1G,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAK4W,WAAW,GAC5C5W,KAAK+O,aAAarI,MAAMnB,KAAOvF,KAAK4W,WAAW,GAC/C5W,KAAKkY,YAAYlY,KAAKa,SAASoN,kBAAkBjO,KAAK+O,aAAarI,MAAM5E,SACzE9B,KAAKmY,aAAanY,KAAKa,SAASoN,kBAAkBjO,KAAK+O,aAAarI,MAAMnB,MAAQvF,KAAK3E,QAGvF2E,KAAKa,SAASyB,eAEhBtC,KAAKmX,WAAWtE,gBAChB7S,KAAKkM,KAAK2G,gBAEZ7S,KAAKkY,YAAYlY,KAAKgF,MACtBhF,KAAKmY,aAAanY,KAAK2H,QAGzBgP,EAAAzU,UAAAqV,QAAA,SAAQ1Z,GAON,GANAmC,KAAK4H,OAAS/J,EAAE6C,QAAUV,KAAKqQ,UAAYrQ,KAAKgX,WAAahX,KAAKkF,IAC9DlF,KAAKiX,UAAYjX,KAAK4H,SACxB5H,KAAK4H,OAAS5H,KAAKiX,WAErBjX,KAAK6W,OAAS7W,KAAKkF,IAAMlF,KAAK4H,OAC9B5H,KAAK+X,YAAc/X,KAAKa,SAASyE,kBAAkBtF,KAAK6W,OAAQzR,KAAKgT,MAChEpY,KAAK+O,aAAarI,MAAM7E,EAAI7B,KAAK+O,aAAarI,MAAMlB,OAAUxF,KAAK+X,YAAa,CAKnF,GAJA/X,KAAK4W,WAAW,GAAK5W,KAAK+O,aAAarI,MAAMlB,KAC7CxF,KAAK+O,aAAarI,MAAMlB,KAAOxF,KAAK+X,YAAc/X,KAAK+O,aAAarI,MAAM7E,EAC1E7B,KAAKmX,WAAW9Y,UAAU2B,KAAKmX,WAAWjF,WAC1ClS,KAAKkM,KAAK7N,UAAU2B,KAAKkM,KAAKgG,UAAWlS,KAAKa,SAASC,SAASvC,qBAC5DyB,KAAKa,SAAS8E,eAAe3F,KAAK+O,aAAarI,OAGjD,OAFA1G,KAAK+O,aAAarI,MAAMlB,KAAOxF,KAAK4W,WAAW,QAC/C5W,KAAKiY,cAAcjY,KAAKa,SAASqN,kBAAkBlO,KAAK+O,aAAarI,MAAMlB,MAAQxF,KAAK3E,QAGxF2E,KAAKa,SAASyB,eAEhBtC,KAAKmX,WAAWtE,gBAChB7S,KAAKkM,KAAK2G,gBAEZ7S,KAAKiY,cAAcjY,KAAK4H,SAG1B+O,EAAAzU,UAAAsV,QAAA,SAAQ3Z,GAON,GANAmC,KAAK2H,MAAQ9J,EAAE0C,QAAUP,KAAKoQ,WAAapQ,KAAK+W,UAAY/W,KAAKgF,KAC7DhF,KAAKkX,SAAWlX,KAAK2H,QACvB3H,KAAK2H,MAAQ3H,KAAKkX,UAEpBlX,KAAK8W,MAAQ9W,KAAKgF,KAAOhF,KAAK2H,MAC9B3H,KAAK+X,YAAc/X,KAAKa,SAASsE,kBAAkBnF,KAAK8W,MAAO1R,KAAKgT,MAC/DpY,KAAK+O,aAAarI,MAAM5E,EAAI9B,KAAK+O,aAAarI,MAAMnB,OAAUvF,KAAK+X,YAAa,CAKnF,GAJA/X,KAAK4W,WAAW,GAAK5W,KAAK+O,aAAarI,MAAMnB,KAC7CvF,KAAK+O,aAAarI,MAAMnB,KAAOvF,KAAK+X,YAAc/X,KAAK+O,aAAarI,MAAM5E,EAC1E9B,KAAKmX,WAAW9Y,UAAU2B,KAAKmX,WAAWlF,UAC1CjS,KAAKkM,KAAK7N,UAAU2B,KAAKkM,KAAK+F,SAAUjS,KAAKa,SAASC,SAASvC,qBAC3DyB,KAAKa,SAAS8E,eAAe3F,KAAK+O,aAAarI,OAGjD,OAFA1G,KAAK+O,aAAarI,MAAMnB,KAAOvF,KAAK4W,WAAW,QAC/C5W,KAAKmY,aAAanY,KAAKa,SAASoN,kBAAkBjO,KAAK+O,aAAarI,MAAMnB,MAAQvF,KAAK3E,QAGvF2E,KAAKa,SAASyB,eAEhBtC,KAAKmX,WAAWtE,gBAChB7S,KAAKkM,KAAK2G,gBAEZ7S,KAAKmY,aAAanY,KAAK2H,QAGzBgP,EAAAzU,UAAAuV,SAAA,SAAS5Z,GACPmC,KAAKqX,QAAQxZ,GACbmC,KAAKsX,QAAQzZ,IAGf8Y,EAAAzU,UAAAwV,SAAA,SAAS7Z,GACPmC,KAAKqX,QAAQxZ,GACbmC,KAAKwX,QAAQ3Z,IAGf8Y,EAAAzU,UAAAyV,SAAA,SAAS9Z,GACPmC,KAAKuX,QAAQ1Z,GACbmC,KAAKsX,QAAQzZ,IAGf8Y,EAAAzU,UAAA0V,SAAA,SAAS/Z,GACPmC,KAAKuX,QAAQ1Z,GACbmC,KAAKwX,QAAQ3Z,IAGf8Y,EAAAzU,UAAA0J,OAAA,WACE5L,KAAKqY,cAAgBrY,KAAK+O,aAAauH,gBAGzCK,EAAAzU,UAAA0T,eAAA,SAAe/X,GAAf,IAAA4E,EAAAzC,KAEE,GADAZ,EAAckB,gBAAgBzC,GACzBmC,KAAKa,SAASC,SAASpD,UAAUT,eAIhC6C,EAAUM,WAAW,WACzBqC,EAAKuR,UAAUnW,GACfwX,KACCrV,KAAKa,SAASC,SAASpD,UAAUT,YAC9B4Y,EAAc7V,KAAK+O,aAAanM,SAASC,OAAO,WAAY,UAAWwS,GACvES,EAAmB9V,KAAK+O,aAAanM,SAASC,OAAO,WAAY,aAAcwS,GAC/EX,EAAe1U,KAAK+O,aAAanM,SAASC,OAAO,SAAU,OAAQwS,GACnEU,EAAkB/V,KAAK+O,aAAanM,SAASC,OAAO,WAAY,YAItE,SAASmT,EAAWC,GAClB7W,EAAckB,gBAAgB2V,IACgB,EAA1C7Q,KAAKM,IAAIuQ,EAAU1V,QAAU1C,EAAE0C,UAA0D,EAA1C6E,KAAKM,IAAIuQ,EAAUvV,QAAU7C,EAAE6C,WAChF2U,MANEa,EAAiBlW,KAAK+O,aAAanM,SAASC,OAAO,WAAY,WAAYwS,GAC3Ec,EAAoBnW,KAAK+O,aAAanM,SAASC,OAAO,WAAY,cAAewS,QAZrFrV,KAAKgU,UAAUnW,GAqBjB,SAASwX,IACPlV,aAAaL,GACb4U,IACAmB,IACAC,IACAC,IACAG,IACAC,MAIJQ,EAAAzU,UAAA8V,WAAA,SAAW9S,GACTlF,KAAKa,SAAS+I,aAAa/B,gBAAgB7H,KAAK+O,aAAanM,SAAU5C,KAAK+O,aAAajM,GAAI9C,KAAKgF,KAAME,IAG1GyR,EAAAzU,UAAAgW,YAAA,SAAYlT,GACVhF,KAAKa,SAAS+I,aAAa/B,gBAAgB7H,KAAK+O,aAAanM,SAAU5C,KAAK+O,aAAajM,GAAIkC,EAAMhF,KAAKkF,MAG1GyR,EAAAzU,UAAA+V,cAAA,SAAcrQ,GACZ5H,KAAK+O,aAAanM,SAAS0E,SAAStH,KAAK+O,aAAajM,GAAI,SAAU8E,EAAS,OAG/E+O,EAAAzU,UAAAiW,aAAA,SAAaxQ,GACX3H,KAAK+O,aAAanM,SAAS0E,SAAStH,KAAK+O,aAAajM,GAAI,QAAS6E,EAAQ,2BA9Y9E5F,EAAAA,sDAHO8M,SACA7M,SARY2M,EAAAA,UA0ZpBgI,EAhZA,GCVA2B,EAAA,WA6BE,SAAAA,EAAYxV,EAAwBjC,EAAoC+B,EAA6BU,GAA7BtD,KAAA4C,SAAAA,EAA6B5C,KAAAsD,KAAAA,EACnGtD,KAAK8C,GAAKA,EAAGoG,cACblJ,KAAK0G,MAAQ,CACXnB,MAAO,EACPC,MAAO,EACP1D,GAAI,EACJD,GAAI,GAEN7B,KAAKa,SAAWA,EAChBb,KAAK2L,KAAO,IAAIkI,EAAkB7T,KAAMa,EAAUb,KAAKsD,MACvDtD,KAAKqK,OAAS,IAAIsM,EAAkB3W,KAAMa,EAAUb,KAAKsD,MA0G7D,OAvGEgV,EAAApW,UAAA6H,SAAA,WACE/J,KAAKwC,gBACLxC,KAAKa,SAASgL,QAAQ7L,OAGxBsY,EAAApW,UAAAM,cAAA,WACExC,KAAK0G,MAAQtH,EAAcC,MAAMW,KAAK0G,MAAO1G,KAAK6D,KAAM,CACtD0B,KAAM1J,UACN2J,KAAM3J,UACNiG,EAAGjG,UACHgG,EAAGhG,UACH0c,YAAa1c,UACbwc,cAAexc,UACf8K,eAAgB9K,UAChBb,YAAaa,UACbX,YAAaW,UACbd,YAAac,UACbZ,YAAaY,UACbT,YAAaS,UACbV,YAAaU,aAIjByc,EAAApW,UAAA+I,YAAA,WACEjL,KAAKa,SAASsL,WAAWnM,aAClBA,KAAKa,SACZb,KAAK2L,KAAKxJ,iBACHnC,KAAK2L,KACZ3L,KAAKqK,OAAOlI,iBACLnC,KAAKqK,QAGdiO,EAAApW,UAAAwJ,QAAA,WACE1L,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,UAAW9C,KAAKqL,UAAY,GAAK,SACjErL,KAAKa,SAAS+I,aAAazC,WAAWnH,KAAK8C,GAAI9C,KAAK0G,MAAO1G,KAAK4C,UAChE5C,KAAKwY,kBAGPF,EAAApW,UAAAsW,eAAA,eACQtT,EAAMlF,KAAK0G,MAAM7E,EAAI7B,KAAKa,SAAS6G,aACnC1C,EAAOhF,KAAK0G,MAAM5E,EAAI9B,KAAKa,SAAS4G,YACpCE,EAAQ3H,KAAK0G,MAAMnB,KAAOvF,KAAKa,SAAS4G,YAAczH,KAAKa,SAASC,SAASzF,OAC7EuM,EAAS5H,KAAK0G,MAAMlB,KAAOxF,KAAKa,SAAS6G,aAAe1H,KAAKa,SAASC,SAASzF,QAEhF2E,KAAKyY,MAAgB,EAAR9Q,GAAsB,EAATC,IAC7B5H,KAAKyY,MAAO,EACRzY,KAAK6D,KAAKjI,cACZoE,KAAK6D,KAAKjI,aAAaoE,KAAK6D,KAAM7D,MAEhCA,KAAKa,SAAS8B,QAAQzG,kBACxB8D,KAAKa,SAAS8B,QAAQzG,iBAAiB8D,KAAK6D,KAAM7D,MAEhDA,KAAKa,SAASC,SAAS5B,kBACzBc,KAAK8C,GAAG4V,gBAAe,IAGvB/Q,IAAU3H,KAAK2H,OAASC,IAAW5H,KAAK4H,SAC1C5H,KAAK2H,MAAQA,EACb3H,KAAK4H,OAASA,EACV5H,KAAKa,SAAS8B,QAAQ1G,oBACxB+D,KAAKa,SAAS8B,QAAQ1G,mBAAmB+D,KAAK6D,KAAM7D,OAGxDA,KAAKkF,IAAMA,EACXlF,KAAKgF,KAAOA,GAGdsT,EAAApW,UAAA0E,YAAA,WACM5G,KAAKa,SAAS8B,QAAQ3G,oBACxBgE,KAAKa,SAAS8B,QAAQ3G,mBAAmBgE,KAAK6D,KAAM7D,OAIxDsY,EAAApW,UAAAoN,iBAAA,SAAiBqJ,EAAwBC,GACnCD,EAASnT,OAASoT,EAASpT,MAAQmT,EAASpT,OAASqT,EAASrT,MAAQoT,EAAS7W,IAAM8W,EAAS9W,GAAK6W,EAAS9W,IAAM+W,EAAS/W,IAG3H7B,KAAKa,SAAS8E,eAAe3F,KAAK0G,QACpC1G,KAAK0G,MAAM5E,EAAI8W,EAAS9W,GAAK,EAC7B9B,KAAK0G,MAAM7E,EAAI+W,EAAS/W,GAAK,EAC7B7B,KAAK0G,MAAMnB,KAAOqT,EAASrT,MAAQ,EACnCvF,KAAK0G,MAAMlB,KAAOoT,EAASpT,MAAQ,EACnCxF,KAAK0L,YAEL1L,KAAK6D,KAAK0B,KAAOvF,KAAK0G,MAAMnB,KAC5BvF,KAAK6D,KAAK2B,KAAOxF,KAAK0G,MAAMlB,KAC5BxF,KAAK6D,KAAK/B,EAAI9B,KAAK0G,MAAM5E,EACzB9B,KAAK6D,KAAKhC,EAAI7B,KAAK0G,MAAM7E,EACzB7B,KAAKa,SAASyI,0BACdtJ,KAAK4G,iBAIT0R,EAAApW,UAAAuN,aAAA,WACE,OAAQzP,KAAKa,SAASuG,SACnBpH,KAAK0G,MAAM6R,cAAgB1c,UAAYmE,KAAKa,SAASC,SAAS9D,UAAUE,QAAU8C,KAAK0G,MAAM6R,cAGlGD,EAAApW,UAAAoU,aAAA,WACE,OAAQtW,KAAKa,SAASuG,SACnBpH,KAAK0G,MAAM2R,gBAAkBxc,UAAYmE,KAAKa,SAASC,SAASpD,UAAUR,QAAU8C,KAAK0G,MAAM2R,oCArIrGlK,EAAAA,UAASlO,KAAA,CAAC,CACTmO,SAAU,gBACVC,SAAA,s5DAEAC,cAAeC,EAAAA,kBAAkBjV,+9CAbhBkV,EAAAA,kBAOXvF,EAAiB4P,WAAA,CAAA,CAAAC,KAsBMC,EAAAA,cA7BwCtK,EAAAA,iBAA3BE,EAAAA,wCAgBzCC,EAAAA,SAiIH0J,EAjJA,GCAAU,EAAA,WAcE,SAAAA,EAAYlW,EAAwBjC,EAAoC+B,GAAA5C,KAAA4C,SAAAA,EACtE5C,KAAK8C,GAAKA,EAAGoG,cACblJ,KAAKa,SAAWA,EAChBb,KAAKa,SAASyB,aAAetC,KAAKsC,aAAaU,KAAKhD,MAoBxD,OAjBEgZ,EAAA9W,UAAA+I,YAAA,kBACSjL,KAAK8C,UACL9C,KAAKa,SAASyB,oBACdtC,KAAKa,UAGdmY,EAAA9W,UAAAI,aAAA,SAAaqJ,GACN3L,KAAKa,SAASwB,YAGbrC,KAAKa,SAAS8I,SAAWgC,GAC3B3L,KAAKa,SAAS8I,QAAQ1D,iBAAiBjG,KAAKa,SAASwB,YAEvDrC,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,UAAW,SAC3C9C,KAAKa,SAAS+I,aAAazC,WAAWnH,KAAK8C,GAAI9C,KAAKa,SAASwB,WAAYrC,KAAK4C,WAN9E5C,KAAK4C,SAAS0E,SAAStH,KAAK8C,GAAI,UAAW,yBAxBhDqL,EAAAA,UAASlO,KAAA,CAAC,CACTmO,SAAU,mBACVC,SAAU,GAEVC,cAAeC,EAAAA,kBAAkBjV,yIARhBkV,EAAAA,kBAEXvF,EAAiB4P,WAAA,CAAA,CAAAC,KAYMC,EAAAA,cAdiBtK,EAAAA,aAqChDuK,EArCA,GCAAC,EAAA,WAOA,SAAAA,KAcA,2BAdCC,EAAAA,SAAQjZ,KAAA,CAAC,CACRkZ,aAAc,CACZlQ,EACAqP,EACAU,GAEFI,QAAS,CACPC,EAAAA,cAEFC,QAAS,CAACrQ,EAAmBqP,GAC7BiB,UAAW,GACXC,UAAW,OAGbP,EArBA","sourcesContent":["import {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nlet scrollSensitivity: number;\nlet scrollSpeed: number;\nconst intervalDuration = 50;\nlet gridsterElement: any;\nlet resizeEvent: boolean | undefined;\nlet resizeEventType: GridsterResizeEventType | undefined;\nlet intervalE: number;\nlet intervalW: number;\nlet intervalN: number;\nlet intervalS: number;\n\nexport function scroll(gridster: GridsterComponentInterface, left: number, top: number, width: number, height: number,\n                       e: MouseEvent, lastMouse: any,\n                       calculateItemPosition: Function, resize?: boolean, resizeEventScrollType?: GridsterResizeEventType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n  if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n    cancelN();\n    if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n      return;\n    }\n    intervalS = startVertical(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n    cancelS();\n    if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n      return;\n    }\n    intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY !== e.clientY) {\n    cancelVertical();\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n  if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n    cancelW();\n    if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n      return;\n    }\n    intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n    cancelE();\n    if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n      return;\n    }\n    intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX !== e.clientX) {\n    cancelHorizontal();\n  }\n}\n\nfunction startVertical(sign: number, calculateItemPosition: Function, lastMouse: any): any {\n  let clientY = lastMouse.clientY;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({clientX: lastMouse.clientX, clientY: clientY});\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign: number, calculateItemPosition: Function, lastMouse: any): any {\n  let clientX = lastMouse.clientX;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({clientX: clientX, clientY: lastMouse.clientY});\n  }, intervalDuration);\n}\n\nexport function cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = undefined;\n}\n\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n","import {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport type gridTypes = 'fit' | 'scrollVertical' | 'scrollHorizontal' | 'fixed' | 'verticalFixed' | 'horizontalFixed';\nexport type displayGrids = 'always' | 'onDrag&Resize' | 'none';\nexport type compactTypes =\n  'none'\n  | 'compactUp'\n  | 'compactLeft'\n  | 'compactUp&Left'\n  | 'compactLeft&Up'\n  | 'compactRight'\n  | 'compactUp&Right'\n  | 'compactRight&Up';\n\nexport enum GridType {\n  Fit = 'fit',\n  ScrollVertical = 'scrollVertical',\n  ScrollHorizontal = 'scrollHorizontal',\n  Fixed = 'fixed',\n  VerticalFixed = 'verticalFixed',\n  HorizontalFixed = 'horizontalFixed'\n}\n\nexport enum DisplayGrid {\n  Always = 'always',\n  OnDragAndResize = 'onDrag&Resize',\n  None = 'none'\n}\n\nexport enum CompactType {\n  None = 'none',\n  CompactUp = 'compactUp',\n  CompactLeft = 'compactLeft',\n  CompactUpAndLeft = 'compactUp&Left',\n  CompactLeftAndUp = 'compactLeft&Up',\n  CompactRight = 'compactRight',\n  CompactUpAndRight = 'compactUp&Right',\n  CompactRightAndUp = 'compactRight&Up',\n}\n\nexport interface GridsterConfig {\n  gridType?: gridTypes;\n  fixedColWidth?: number;\n  fixedRowHeight?: number;\n  keepFixedHeightInMobile?: boolean;\n  keepFixedWidthInMobile?: boolean;\n  setGridSize?: boolean;\n  compactType?: compactTypes;\n  mobileBreakpoint?: number;\n  minCols?: number;\n  maxCols?: number;\n  minRows?: number;\n  maxRows?: number;\n  defaultItemCols?: number;\n  defaultItemRows?: number;\n  maxItemCols?: number;\n  maxItemRows?: number;\n  minItemCols?: number;\n  minItemRows?: number;\n  minItemArea?: number;\n  maxItemArea?: number;\n  margin?: number;\n  outerMargin?: boolean;\n  outerMarginTop?: number | null;\n  outerMarginRight?: number | null;\n  outerMarginBottom?: number | null;\n  outerMarginLeft?: number | null;\n  useTransformPositioning?: boolean;\n  scrollSensitivity?: number | null;\n  scrollSpeed?: number;\n  initCallback?: (gridster: GridsterComponentInterface) => void;\n  destroyCallback?: (gridster: GridsterComponentInterface) => void;\n  gridSizeChangedCallback?: (gridster: GridsterComponentInterface) => void;\n  itemChangeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemResizeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemInitCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemRemovedCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemValidateCallback?: (item: GridsterItem) => boolean;\n  draggable?: Draggable;\n  resizable?: Resizable;\n  swap?: boolean;\n  pushItems?: boolean;\n  disablePushOnDrag?: boolean;\n  disablePushOnResize?: boolean;\n  disableAutoPositionOnConflict?: boolean;\n  pushDirections?: PushDirections;\n  pushResizeItems?: boolean;\n  displayGrid?: displayGrids;\n  disableWindowResize?: boolean;\n  disableWarnings?: boolean;\n  scrollToNewItems?: boolean;\n  enableEmptyCellClick?: boolean;\n  enableEmptyCellContextMenu?: boolean;\n  enableEmptyCellDrop?: boolean;\n  enableEmptyCellDrag?: boolean;\n  emptyCellClickCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellContextMenuCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDropCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragMaxCols?: number;\n  emptyCellDragMaxRows?: number;\n  ignoreMarginInRow?: boolean;\n  api?: {\n    resize?: () => void,\n    optionsChanged?: () => void,\n    getNextPossiblePosition?: (newItem: GridsterItem) => boolean,\n    getFirstPossiblePosition?: (item: GridsterItem) => GridsterItem,\n    getLastPossiblePosition?: (item: GridsterItem) => GridsterItem,\n  };\n\n  [propName: string]: any;\n}\n\nexport interface DragBase {\n  enabled?: boolean;\n  stop?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => Promise<any> | void;\n  start?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => void;\n  delayStart?: number;\n}\n\nexport interface Draggable extends DragBase {\n  ignoreContentClass?: string;\n  ignoreContent?: boolean;\n  dragHandleClass?: string;\n  dropOverItems?: boolean;\n  dropOverItemsCallback?: (source: GridsterItem, target: GridsterItem, grid?: GridsterComponentInterface) => void;\n}\n\nexport interface Resizable extends DragBase {\n  handles?: {\n    s: boolean,\n    e: boolean,\n    n: boolean,\n    w: boolean,\n    se: boolean,\n    ne: boolean,\n    sw: boolean,\n    nw: boolean\n  };\n}\n\nexport interface PushDirections {\n  north: boolean;\n  east: boolean;\n  south: boolean;\n  west: boolean;\n}\n","import {CompactType, DisplayGrid, GridsterConfig, GridType} from './gridsterConfig.interface';\n\nexport const GridsterConfigService: GridsterConfig = {\n  gridType: GridType.Fit, // 'fit' will fit the items in the container without scroll;\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250, // fixed col width for gridType: 'fixed'\n  fixedRowHeight: 250, // fixed row height for gridType: 'fixed'\n  keepFixedHeightInMobile: false, // keep the height from fixed gridType in mobile layout\n  keepFixedWidthInMobile: false, // keep the width from fixed gridType in mobile layout\n  setGridSize: false, // sets grid size depending on content\n  compactType: CompactType.None, // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n  mobileBreakpoint: 640, // if the screen is not wider that this, remove the grid layout and stack the items\n  minCols: 1, // minimum amount of columns in the grid\n  maxCols: 100, // maximum amount of columns in the grid\n  minRows: 1, // minimum amount of rows in the grid\n  maxRows: 100, // maximum amount of rows in the grid\n  defaultItemCols: 1, // default width of an item in columns\n  defaultItemRows: 1, // default height of an item in rows\n  maxItemCols: 50, // max item number of cols\n  maxItemRows: 50, // max item number of rows\n  minItemCols: 1, // min item number of columns\n  minItemRows: 1, // min item number of rows\n  minItemArea: 1, // min item area: cols * rows\n  maxItemArea: 2500, // max item area: cols * rows\n  margin: 10,  // margin between grid items\n  outerMargin: true,  // if margins will apply to the sides of the container\n  outerMarginTop: null, // override outer margin for grid\n  outerMarginRight: null, // override outer margin for grid\n  outerMarginBottom: null, // override outer margin for grid\n  outerMarginLeft: null, // override outer margin for grid\n  useTransformPositioning: true, // toggle between transform or top/left positioning of items\n  scrollSensitivity: 10,  // margin of the dashboard where to start scrolling\n  scrollSpeed: 20,  // how much to scroll each mouse move when in the scrollSensitivity zone\n  initCallback: undefined, // callback to call after grid has initialized. Arguments: gridsterComponent\n  destroyCallback: undefined, // callback to call after grid has destroyed. Arguments: gridsterComponent\n  gridSizeChangedCallback: undefined, // callback to call after grid has changed size. Arguments: gridsterComponent\n  itemChangeCallback: undefined,  // callback to call for each item when is changes x, y, rows, cols.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,  // callback to call for each item when width/height changes.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,  // callback to call to validate item position/size. Return true if valid.\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false, // enable empty cell click events\n  enableEmptyCellContextMenu: false, // enable empty cell context menu (right click) events\n  enableEmptyCellDrop: false, // enable empty cell drop events\n  enableEmptyCellDrag: false, // enable empty cell drag events\n  emptyCellClickCallback: undefined, // empty cell click callback\n  emptyCellContextMenuCallback: undefined, // empty cell context menu (right click) callback\n  emptyCellDropCallback: undefined, // empty cell drag drop callback. HTML5 Drag & Drop\n  emptyCellDragCallback: undefined, // empty cell drag and create item like excel cell selection\n  emptyCellDragMaxCols: 50, // limit empty cell drag max cols\n  emptyCellDragMaxRows: 50, // limit empty cell drag max rows\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false, // ignore the gap between rows for items which span multiple rows (see #162, #224)\n  draggable: {\n    delayStart: 0, // milliseconds to delay the start of drag, useful for touch interaction\n    enabled: false, // enable/disable draggable items\n    ignoreContentClass: 'gridster-item-content', // default content class to ignore the drag event from\n    ignoreContent: false, // if true drag will start only from elements from `dragHandleClass`\n    dragHandleClass: 'drag-handler', // drag event only from this class. If `ignoreContent` is true.\n    stop: undefined, // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n    start: undefined, // callback when dragging an item starts.\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false, // enable drop items on top other item\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n  resizable: {\n    delayStart: 0, // milliseconds to delay the start of resize, useful for touch interaction\n    enabled: false, // enable/disable resizable items\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    }, // resizable edges of an item\n    stop: undefined, // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n  swap: true, // allow items to switch position if drop on top of another\n  pushItems: false, // push items when resizing and dragging\n  disablePushOnDrag: false, // disable push on drag\n  disablePushOnResize: false, // disable push on resize\n  pushDirections: {north: true, east: true, south: true, west: true}, // control the directions items are pushed\n  pushResizeItems: false, // on resize of item will shrink adjacent items\n  displayGrid: DisplayGrid.OnDragAndResize, // display background grid of rows and columns\n  disableWindowResize: false, // disable the window on resize listener. This will stop grid to recalculate on window resize.\n  disableWarnings: false, // disable console log warnings about misplacement of grid items\n  scrollToNewItems: false, // scroll to new items placed in a scrollable view\n  disableAutoPositionOnConflict: false  // disable auto-position of items on conflict state\n};\n","import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterUtils {\n\n  static merge(obj1: any, obj2: any, properties: any) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  }\n\n  static debounce(func: Function, wait: number): () => void {\n    let timeout: any;\n    return function () {\n      const context = this, args = arguments;\n      const later = function () {\n        timeout = null;\n        func.apply(context, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  static checkTouchEvent(e: any): void {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster: GridsterComponentInterface, e: any): boolean {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster: GridsterComponentInterface, e: any): boolean {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\n      || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkContentClass(target: any, current: any, contentClass: string): boolean {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a: { x: number, y: number }, b: { x: number, y: number }): number {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n","import {GridsterConfigS} from './gridsterConfigS.interface';\nimport {ChangeDetectorRef, NgZone, Renderer2} from '@angular/core';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\n\nexport abstract class GridsterComponentInterface {\n  $options: GridsterConfigS;\n  grid: Array<GridsterItemComponentInterface>;\n  checkCollision: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  positionXToPixels: (x: number) => number;\n  pixelsToPositionX: (x: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  positionYToPixels: (y: number) => number;\n  pixelsToPositionY: (y: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  findItemWithItem: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  findItemsWithItem: (item: GridsterItem) => Array<GridsterItemComponentInterface>;\n  checkGridCollision: (item: GridsterItem) => boolean;\n  el: any;\n  renderer: Renderer2;\n  gridRenderer: GridsterRenderer;\n  cdRef: ChangeDetectorRef;\n  options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  updateGrid: () => void;\n  movingItem: GridsterItem | null;\n  addItem: (item: GridsterItemComponentInterface) => void;\n  removeItem: (item: GridsterItemComponentInterface) => void;\n  previewStyle: (drag?: boolean) => void;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  windowResize: (() => void) | null;\n  setGridDimensions: (() => void);\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  zone: NgZone;\n  gridRows: Array<number>;\n  gridColumns: Array<number>;\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterEmptyCell {\n  initialItem: GridsterItem | null;\n  emptyCellClick: Function | null;\n  emptyCellClickTouch: Function | null;\n  emptyCellContextMenu: Function | null;\n  emptyCellDrop: Function | null;\n  emptyCellDrag: Function | null;\n  emptyCellDragTouch: Function | null;\n  emptyCellMMove: Function;\n  emptyCellMMoveTouch: Function;\n  emptyCellUp: Function;\n  emptyCellUpTouch: Function;\n  emptyCellMove: Function | null;\n  emptyCellExit: Function | null;\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.initialItem;\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridster;\n    if (this.emptyCellExit) {\n      this.emptyCellExit();\n      this.emptyCellExit = null;\n    }\n  }\n\n  updateOptions(): void {\n    if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n      this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n      this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n      this.emptyCellClick();\n      this.emptyCellClickTouch();\n      this.emptyCellClick = null;\n      this.emptyCellClickTouch = null;\n    }\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n      this.gridster.options.emptyCellContextMenuCallback) {\n      this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n      this.emptyCellContextMenu();\n      this.emptyCellContextMenu = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n      this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n      this.gridster.zone.runOutsideAngular(() => {\n        this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n      });\n      this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n      this.emptyCellDrop();\n      this.emptyCellMove();\n      this.emptyCellExit();\n      this.emptyCellMove = null;\n      this.emptyCellDrop = null;\n      this.emptyCellExit = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n      this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n      this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n      this.emptyCellDrag();\n      this.emptyCellDragTouch();\n      this.emptyCellDrag = null;\n      this.emptyCellDragTouch = null;\n    }\n  }\n\n  emptyCellClickCb(e: any): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellClickCallback) {\n      this.gridster.options.emptyCellClickCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellContextMenuCb(e: any): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellContextMenuCallback) {\n      this.gridster.options.emptyCellContextMenuCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragDrop(e: any): void {\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellDropCallback) {\n      this.gridster.options.emptyCellDropCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragOver(e: any): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (item) {\n      e.dataTransfer.dropEffect = 'move';\n      this.gridster.movingItem = item;\n    } else {\n      e.dataTransfer.dropEffect = 'none';\n      this.gridster.movingItem = null;\n    }\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseDown(e: any): void {\n    if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    const leftMouseButtonCode = 1;\n    if (!item || e.buttons !== leftMouseButtonCode) {\n      return;\n    }\n    this.initialItem = item;\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n    this.gridster.zone.runOutsideAngular(() => {\n      this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n      this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n    });\n    this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n    this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n  }\n\n  emptyCellMouseMove(e: any): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (!item) {\n      return;\n    }\n\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseUp(e: any): void {\n    this.emptyCellMMove();\n    this.emptyCellMMoveTouch();\n    this.emptyCellUp();\n    this.emptyCellUpTouch();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (item) {\n      this.gridster.movingItem = item;\n    }\n    if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n      this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n    }\n    setTimeout(() => {\n      this.initialItem = null;\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n    this.gridster.cdRef.markForCheck();\n  }\n\n  getValidItemFromEvent(e: any, oldItem?: GridsterItem | null): GridsterItem | undefined {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.$options.margin;\n    const y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.$options.margin;\n    const item: GridsterItem = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n    if (this.gridster.checkCollision(item)) {\n      return;\n    }\n    return item;\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {CompactType} from './gridsterConfig.interface';\n\n@Injectable()\nexport class GridsterCompact {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  checkCompact(): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactUp();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactUp();\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactLeft();\n        this.checkCompactUp();\n      } else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n        this.checkCompactRight();\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactUp();\n        this.checkCompactRight();\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n        this.checkCompactRight();\n        this.checkCompactUp();\n      }\n    }\n  }\n\n  checkCompactItem(item: GridsterItem): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveUpTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveUpTillCollision(item);\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveLeftTillCollision(item);\n        this.moveUpTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveUpTillCollision(item);\n        this.moveRightTillCollision(item);\n      }\n    }\n  }\n\n  checkCompactUp(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveUpTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.y = widget.$item.y;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveUpTillCollision(item: GridsterItem): boolean {\n    item.y -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.y += 1;\n      return false;\n    } else {\n      this.moveUpTillCollision(item);\n      return true;\n    }\n  }\n\n  checkCompactLeft(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveLeftTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.x = widget.$item.x;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  checkCompactRight(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveRightTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.x = widget.$item.x;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveLeftTillCollision(item: GridsterItem): boolean {\n    item.x -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.x += 1;\n      return false;\n    } else {\n      this.moveLeftTillCollision(item);\n      return true;\n    }\n  }\n\n  moveRightTillCollision(item) {\n    item.x += 1;\n    if (this.gridster.checkCollision(item)) {\n      item.x -= 1;\n      return false;\n    } else {\n      this.moveRightTillCollision(item);\n      return true;\n    }\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable, Renderer2} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridType} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Injectable()\nexport class GridsterRenderer {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  updateItem(el: any, item: GridsterItem, renderer: Renderer2) {\n    if (this.gridster.mobile) {\n      this.clearCellPosition(renderer, el);\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\n      } else {\n        renderer.setStyle(el, 'height', (this.gridster.curWidth / 2 * item.rows) + 'px');\n      }\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, 'margin-right', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n      // set the cell style\n      this.setCellPosition(renderer, el, x, y);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom: string | null = null;\n      let marginRight: string | null = null;\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, 'margin-right', marginRight);\n    }\n  }\n\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      this.gridster.curColWidth = this.gridster.curRowHeight;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i: number) {\n    return {\n      ...this.getLeftPosition(this.gridster.curColWidth * i),\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getGridRowStyle(i: number) {\n    return {\n      ...this.getTopPosition(this.gridster.curRowHeight * i),\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getLeftPosition(d: number): Object {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateX(' + d + 'px)',\n      };\n    } else {\n      return {\n        left: (this.getLeftMargin() + d) + 'px'\n      };\n    }\n  }\n\n  getTopPosition(d: number): Object {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateY(' + d + 'px)',\n      };\n    } else {\n      return {\n        top: this.getTopMargin() + d + 'px'\n      };\n    }\n  }\n\n  clearCellPosition(renderer: Renderer2, el: any): void {\n    if (this.gridster.$options.useTransformPositioning) {\n      renderer.setStyle(el, 'transform', '');\n    } else {\n      renderer.setStyle(el, 'top', '');\n      renderer.setStyle(el, 'left', '');\n    }\n  }\n\n  setCellPosition(renderer: Renderer2, el: any, x: number, y: number): void {\n    if (this.gridster.$options.useTransformPositioning) {\n      const transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n    } else {\n      renderer.setStyle(el, 'left', this.getLeftMargin() + x + 'px');\n      renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n    }\n  }\n\n  getLeftMargin(): number {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginLeft !== null) {\n        return this.gridster.$options.outerMarginLeft;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  getTopMargin(): number {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginTop !== null) {\n        return this.gridster.$options.outerMarginTop;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {GridsterConfigService} from './gridsterConfig.constant';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfigS} from './gridsterConfigS.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Component({\n  selector: 'gridster',\n  templateUrl: './gridster.html',\n  styleUrls: ['./gridster.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterComponent implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface {\n  @Input() options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  movingItem: GridsterItem | null;\n  previewStyle: () => void;\n  el: any;\n  $options: GridsterConfigS;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  grid: Array<GridsterItemComponentInterface>;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  gridColumns = [];\n  gridRows = [];\n  windowResize: (() => void) | null;\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  gridRenderer: GridsterRenderer;\n\n  constructor(el: ElementRef, public renderer: Renderer2, public cdRef: ChangeDetectorRef, public zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  }\n\n  static checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n    return item.x < item2.x + item2.cols\n      && item.x + item.cols > item2.x\n      && item.y < item2.y + item2.rows\n      && item.y + item.rows > item2.y;\n  }\n\n  ngOnInit(): void {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged.bind(this),\n        resize: this.onResize.bind(this),\n        getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n        getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n        getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  resize(): void {\n    let height;\n    let width;\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n\n  setOptions(): void {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n    this.emptyCell.updateOptions();\n  }\n\n  optionsChanged(): void {\n    this.setOptions();\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.updateOptions();\n    }\n    this.calculateLayout();\n  }\n\n  ngOnDestroy(): void {\n    if (this.windowResize) {\n      this.windowResize();\n    }\n    if (this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n    if (this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n    this.emptyCell.destroy();\n    delete this.emptyCell;\n    this.compact.destroy();\n    delete this.compact;\n  }\n\n  onResize(): void {\n    this.setGridSize();\n    this.calculateLayout();\n  }\n\n  checkIfToResize(): boolean {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n      && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight\n      && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n    if (verticalScrollPresent) {\n      return false;\n    }\n    return !horizontalScrollPresent;\n  }\n\n  setGridSize(): void {\n    const el = this.el;\n    let width = el.clientWidth;\n    let height = el.clientHeight;\n    if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\n      width = el.offsetWidth;\n      height = el.offsetHeight;\n    } else {\n      width = el.clientWidth;\n      height = el.clientHeight;\n    }\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n\n  setGridDimensions(): void {\n    this.setGridSize();\n    if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n    let rows = this.$options.minRows, columns = this.$options.minCols;\n\n    let widgetsIndex = this.grid.length - 1, widget;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n\n  calculateLayout(): void {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n\n    this.setGridDimensions();\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n      this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n    this.gridRenderer.updateGridster();\n\n    this.updateGrid();\n\n    if (this.$options.setGridSize) {\n      this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n      this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n    } else {\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n\n    setTimeout(this.resize.bind(this), 100);\n  }\n\n  updateGrid(): void {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n    this.setGridDimensions();\n    this.gridColumns.length = Math.max(this.columns, Math.floor(this.curWidth / this.curColWidth)) || 0;\n    this.gridRows.length = Math.max(this.rows, Math.floor(this.curHeight / this.curRowHeight)) || 0;\n    this.cdRef.markForCheck();\n  }\n\n  addItem(itemComponent: GridsterItemComponentInterface): void {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n    this.grid.push(itemComponent);\n    this.calculateLayoutDebounce();\n  }\n\n  removeItem(itemComponent: GridsterItemComponentInterface): void {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayoutDebounce();\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n\n  checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let collision: GridsterItemComponentInterface | boolean = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n\n  checkGridCollision(item: GridsterItem): boolean {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n\n  findItemWithItem(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n\n  findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n    const a: Array<GridsterItemComponentInterface> = [];\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n    return a;\n  }\n\n  autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n      if (!this.$options.disableWarnings) {\n        console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n\n  getNextPossiblePosition(newItem: GridsterItem, startingFrom: { y?: number, x?: number } = {}): boolean {\n    if (newItem.cols === -1) {\n      newItem.cols = this.$options.defaultItemCols;\n    }\n    if (newItem.rows === -1) {\n      newItem.rows = this.$options.defaultItemRows;\n    }\n    this.setGridDimensions();\n    let rowsIndex = startingFrom.y || 0, colsIndex;\n    for (; rowsIndex < this.rows; rowsIndex++) {\n      newItem.y = rowsIndex;\n      colsIndex = startingFrom.x || 0;\n      for (; colsIndex < this.columns; colsIndex++) {\n        newItem.x = colsIndex;\n        if (!this.checkCollision(newItem)) {\n          return true;\n        }\n      }\n    }\n    const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n    const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n    const addToRows = this.rows <= this.columns && canAddToRows;\n    if (!addToRows && canAddToColumns) {\n      newItem.x = this.columns;\n      newItem.y = 0;\n      return true;\n    } else if (canAddToRows) {\n      newItem.y = this.rows;\n      newItem.x = 0;\n      return true;\n    }\n    return false;\n  }\n\n  getFirstPossiblePosition(item: GridsterItem): GridsterItem {\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem);\n    return tmpItem;\n  }\n\n  getLastPossiblePosition(item: GridsterItem): GridsterItem {\n    let farthestItem: { y: number, x: number } = {y: 0, x: 0};\n    farthestItem = this.grid.reduce((prev: any, curr: GridsterItemComponentInterface) => {\n      const currCoords = {y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1};\n      if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n        return currCoords;\n      } else {\n        return prev;\n      }\n    }, farthestItem);\n\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem, farthestItem);\n    return tmpItem;\n  }\n\n  pixelsToPositionX(x: number, roundingMethod: Function, noLimit?: boolean): number {\n    const position = roundingMethod(x / this.curColWidth);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  pixelsToPositionY(y: number, roundingMethod: Function, noLimit?: boolean): number {\n    const position = roundingMethod(y / this.curRowHeight);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  positionXToPixels(x: number): number {\n    return x * this.curColWidth;\n  }\n\n  positionYToPixels(y: number): number {\n    return y * this.curRowHeight;\n  }\n}\n","import {GridsterItem} from './gridsterItem.interface';\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {Renderer2} from '@angular/core';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport abstract class GridsterItemComponentInterface {\n  item: GridsterItem;\n  $item: GridsterItem;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  updateOptions: () => void;\n  itemChanged: () => void;\n  setSize: () => void;\n  checkItemChanges: (newValue: GridsterItem, oldValue: GridsterItem) => void;\n  canBeDragged: () => boolean;\n  canBeResized: () => boolean;\n  el: any;\n  gridster: GridsterComponentInterface;\n  renderer: Renderer2;\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterSwap {\n  private swapedItem: GridsterItemComponentInterface | undefined;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n    delete this.swapedItem;\n  }\n\n  swapItems(): void {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack(): void {\n    if (this.swapedItem) {\n      const x: number = this.swapedItem.$item.x;\n      const y: number = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n\n    }\n  }\n\n  restoreSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy: GridsterItemComponentInterface): void {\n    const gridsterItemCollision: any = this.gridster.checkCollision(pushedBy.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide: GridsterItemComponentInterface = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n      gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n      pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n      pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n      }\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterPush {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsTemp: Array<GridsterItemComponentInterface>;\n  private pushedItemsTempPath: Array<Array<{ x: number, y: number }>>;\n  private pushedItemsPath: Array<Array<{ x: number, y: number }>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private pushedItemsOrder: Array<GridsterItemComponentInterface>;\n  private tryPattern: {\n    fromEast: Array<Function>,\n    fromWest: Array<Function>,\n    fromNorth: Array<Function>,\n    fromSouth: Array<Function>,\n    [key: string]: Array<Function>\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string, disable?: boolean): boolean {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      const pushed = this.push(this.gridsterItem, direction);\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems(): void {\n    let i = this.pushedItemsTemp.length - 1;\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n    if (direction === '') {\n      return false;\n    }\n    const a: Array<GridsterItemComponentInterface> = this.gridster.findItemsWithItem(gridsterItem.$item);\n    let i = a.length - 1, itemCollision: GridsterItemComponentInterface;\n    let makePush = true;\n    const b: Array<GridsterItemComponentInterface> = [];\n    for (; i > -1; i--) {\n      itemCollision = a[i];\n      if (itemCollision === this.gridsterItem) {\n        makePush = false;\n        break;\n      }\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n      const compare = this.pushedItemsTemp.find((el: GridsterItemComponentInterface) => {\n        return el.$item.x === itemCollision.$item.x && el.$item.y === itemCollision.$item.y;\n      });\n      if (compare) {\n        makePush = false;\n        break;\n      }\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(b[0]);\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n    return makePush;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private addToTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n    this.pushedItemsTempPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n  }\n\n  private removeFromTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n    if (!tempPosition) {\n      return;\n    }\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0},\n        {x: gridsterItem.$item.x, y: gridsterItem.$item.y}]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private removeFromPushedItem(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItems.indexOf(gridsterItem);\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition, x, y;\n    let change = false;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n    return change;\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\n\nimport {GridsterSwap} from './gridsterSwap.service';\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterDraggable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  offsetLeft: number;\n  offsetTop: number;\n  margin: number;\n  diffTop: number;\n  diffLeft: number;\n  top: number;\n  left: number;\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  positionXBackup: number;\n  positionYBackup: number;\n  enabled: boolean;\n  dragStartFunction: (event: any) => void;\n  dragFunction: (event: any) => void;\n  dragStopFunction: (event: any) => void;\n  mousemove: Function;\n  mouseup: Function;\n  mouseleave: Function;\n  cancelOnBlur: Function;\n  touchmove: Function;\n  touchend: Function;\n  touchcancel: Function;\n  mousedown: Function;\n  touchstart: Function;\n  push: GridsterPush;\n  swap: GridsterSwap;\n  path: Array<{ x: number, y: number }>;\n  collision: GridsterItemComponentInterface | boolean = false;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n\n  destroy(): void {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n    delete this.collision;\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e: any): void {\n    switch (e.which) {\n      case 1:\n        // left mouse button\n        break;\n      case 2:\n      case 3:\n        // right or middle mouse button\n        return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0});\n  }\n\n  dragMove(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse,\n      this.calculateItemPositionFromMousePosition.bind(this));\n\n    this.calculateItemPositionFromMousePosition(e);\n  }\n\n  calculateItemPositionFromMousePosition(e: any): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.calculateItemPosition();\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n\n    cancelScroll();\n    this.cancelOnBlur();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    this.path = [];\n    if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n      Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n    } else {\n      this.makeDrag();\n    }\n    setTimeout(() => {\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle(true);\n      }\n    });\n  }\n\n  cancelDrag() {\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    if (this.push) {\n      this.push.restoreItems();\n    }\n    if (this.swap) {\n      this.swap.restoreSwapItem();\n    }\n    if (this.push) {\n      this.push.destroy();\n      delete this.push;\n    }\n    if (this.swap) {\n      this.swap.destroy();\n      delete this.swap;\n    }\n  }\n\n  makeDrag() {\n    if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n      && this.gridster.options.draggable.dropOverItemsCallback\n      && this.collision && this.collision !== true && this.collision.$item) {\n      this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n    }\n    this.collision = false;\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    if (this.push) {\n      this.push.setPushedItems();\n    }\n    if (this.swap) {\n      this.swap.setSwapItem();\n    }\n    if (this.push) {\n      this.push.destroy();\n      delete this.push;\n    }\n    if (this.swap) {\n      this.swap.destroy();\n      delete this.swap;\n    }\n  }\n\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n    this.gridsterItem.$item.y = this.positionY;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y});\n      }\n      this.push.checkPushBack();\n    }\n    this.gridster.previewStyle(true);\n  }\n\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.dragStartFunction = this.dragStartDelay.bind(this);\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStartDelay(e: any): void {\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n      return;\n    }\n    if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n      return;\n    }\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.draggable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.draggable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: any) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Injectable()\nexport class GridsterPushResize {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsPath: Array<Array<GridsterItem>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private tryPattern: {\n    fromEast: Function,\n    fromWest: Function,\n    fromNorth: Function,\n    fromSouth: Function,\n    [key: string]: Function\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string): boolean {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    const gridsterItemCollision: any = this.gridster.checkCollision(gridsterItem.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true &&\n      gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n    return false;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([\n        {\n          x: gridsterItem.item.x || 0,\n          y: gridsterItem.item.y || 0,\n          cols: gridsterItem.item.cols || 0,\n          rows: gridsterItem.item.rows || 0\n        },\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push(\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        });\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition: { x: number, y: number, cols: number, rows: number }, x, y, cols, rows;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n    return false;\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\n\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterPushResize} from './gridsterPushResize.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterResizable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  itemBackup: Array<number>;\n  resizeEventScrollType: GridsterResizeEventType;\n  directionFunction: Function;\n  dragFunction: (event: any) => void;\n  dragStopFunction: (event: any) => void;\n  resizeEnabled: boolean;\n  mousemove: Function;\n  mouseup: Function;\n  mouseleave: Function;\n  cancelOnBlur: Function;\n  touchmove: Function;\n  touchend: Function;\n  touchcancel: Function;\n  push: GridsterPush;\n  pushResize: GridsterPushResize;\n  minHeight: number;\n  minWidth: number;\n  offsetTop: number;\n  offsetLeft: number;\n  diffTop: number;\n  diffLeft: number;\n  diffRight: number;\n  diffBottom: number;\n  margin: number;\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  width: number;\n  height: number;\n  newPosition: number;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {w: false, e: false, n: false, s: false};\n  }\n\n  destroy(): void {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n  }\n\n  dragStart(e: any): void {\n    switch (e.which) {\n      case 1:\n        // left mouse button\n        break;\n      case 2:\n      case 3:\n        // right or middle mouse button\n        return;\n    }\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n      - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n      - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.directionFunction = this.handleN;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.directionFunction = this.handleS;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleE;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleNW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleNE;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleSW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleSE;\n    }\n  }\n\n  dragMove(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true,\n      this.resizeEventScrollType);\n    this.directionFunction(e);\n\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.cancelOnBlur();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n      Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n    } else {\n      this.makeResize();\n    }\n    setTimeout(() => {\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n  }\n\n  cancelResize(): void {\n    this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n    this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.pushResize.restoreItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  makeResize(): void {\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.pushResize.setPushedItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  handleN(e: any): void {\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.height = this.bottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n      this.top = this.bottom - this.minHeight;\n    }\n    this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n    if (this.gridsterItem.$item.y !== this.newPosition) {\n      this.itemBackup[1] = this.gridsterItem.$item.y;\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n      this.gridsterItem.$item.y = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromSouth);\n      this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.itemBackup[1];\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemTop(this.top);\n    this.setItemHeight(this.height);\n  }\n\n  handleW(e: any): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.width = this.right - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n      this.left = this.right - this.minWidth;\n    }\n    this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n    if (this.gridsterItem.$item.x !== this.newPosition) {\n      this.itemBackup[0] = this.gridsterItem.$item.x;\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n      this.gridsterItem.$item.x = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromEast);\n      this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.itemBackup[0];\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemLeft(this.left);\n    this.setItemWidth(this.width);\n  }\n\n  handleS(e: any): void {\n    this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n    }\n    this.bottom = this.top + this.height;\n    this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n    if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n      this.pushResize.pushItems(this.pushResize.fromNorth);\n      this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemHeight(this.height);\n  }\n\n  handleE(e: any): void {\n    this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n    }\n    this.right = this.left + this.width;\n    this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n    if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n      this.pushResize.pushItems(this.pushResize.fromWest);\n      this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemWidth(this.width);\n  }\n\n  handleNW(e: any): void {\n    this.handleN(e);\n    this.handleW(e);\n  }\n\n  handleNE(e: any): void {\n    this.handleN(e);\n    this.handleE(e);\n  }\n\n  handleSW(e: any): void {\n    this.handleS(e);\n    this.handleW(e);\n  }\n\n  handleSE(e: any): void {\n    this.handleS(e);\n    this.handleE(e);\n  }\n\n  toggle(): void {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e: any): void {\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: any) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top: number): void {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n  }\n\n  setItemLeft(left: number): void {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n  }\n\n  setItemHeight(height: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n}\n","import {Component, ElementRef, Host, Input, NgZone, OnDestroy, OnInit, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-item',\n  templateUrl: './gridsterItem.html',\n  styleUrls: ['./gridsterItem.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterItemComponent implements OnInit, OnDestroy, GridsterItemComponentInterface {\n  @Input() item: GridsterItem;\n  $item: GridsterItem;\n  el: any;\n  gridster: GridsterComponent;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  init: boolean;\n\n  constructor(el: ElementRef, @Host() gridster: GridsterComponent, public renderer: Renderer2, private zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1,\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n\n  ngOnInit(): void {\n    this.updateOptions();\n    this.gridster.addItem(this);\n  }\n\n  updateOptions(): void {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      dragEnabled: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined,\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.gridster.removeItem(this);\n    delete this.gridster;\n    this.drag.destroy();\n    delete this.drag;\n    this.resize.destroy();\n    delete this.resize;\n  }\n\n  setSize(): void {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n\n  updateItemSize() {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n    }\n    this.top = top;\n    this.left = left;\n  }\n\n  itemChanged(): void {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n  }\n\n  checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayoutDebounce();\n      this.itemChanged();\n    }\n  }\n\n  canBeDragged(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n  }\n\n  canBeResized(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n  }\n\n}\n","import {Component, ElementRef, Host, OnDestroy, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-preview',\n  template: '',\n  styleUrls: ['./gridsterPreview.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterPreviewComponent implements OnDestroy {\n  el: any;\n  gridster: GridsterComponent;\n\n  constructor(el: ElementRef, @Host() gridster: GridsterComponent, public renderer: Renderer2) {\n    this.el = el.nativeElement;\n    this.gridster = gridster;\n    this.gridster.previewStyle = this.previewStyle.bind(this);\n  }\n\n  ngOnDestroy(): void {\n    delete this.el;\n    delete this.gridster.previewStyle;\n    delete this.gridster;\n  }\n\n  previewStyle(drag?: boolean): void {\n    if (!this.gridster.movingItem) {\n      this.renderer.setStyle(this.el, 'display', '');\n    } else {\n      if (this.gridster.compact && drag) {\n        this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n      }\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\nimport {GridsterItemComponent} from './gridsterItem.component';\nimport {GridsterPreviewComponent} from './gridsterPreview.component';\n\n@NgModule({\n  declarations: [\n    GridsterComponent,\n    GridsterItemComponent,\n    GridsterPreviewComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [GridsterComponent, GridsterItemComponent],\n  providers: [],\n  bootstrap: []\n})\nexport class GridsterModule {\n}\n"]}